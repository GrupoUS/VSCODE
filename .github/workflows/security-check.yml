name: Security Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install git-secrets
        run: |
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets
          make install
          cd ..
          rm -rf git-secrets

      - name: Configure git-secrets
        run: |
          git secrets --install -f
          git secrets --register-aws
          git secrets --add "api_key"
          git secrets --add "api-key"
          git secrets --add "secret_key"
          git secrets --add "secret-key"
          git secrets --add "access_key"
          git secrets --add "access-key"
          git secrets --add "bearer"
          git secrets --add "token"
          git secrets --add "password"
          git secrets --add "senha"
          git secrets --add "BEGIN RSA PRIVATE KEY"
          git secrets --add "BEGIN DSA PRIVATE KEY"
          git secrets --add "BEGIN EC PRIVATE KEY"
          git secrets --add "BEGIN OPENSSH PRIVATE KEY"
          git secrets --add "BEGIN CERTIFICATE"

      - name: Check for secrets
        run: |
          if git secrets --scan; then
            echo "‚úÖ Nenhum secret encontrado"
            exit 0
          else
            echo "‚ùå Secrets encontrados no c√≥digo"
            exit 1
          fi

      - name: Validate .env files
        run: |
          if git ls-files | grep -E '\.env$' | grep -v '.env.example'; then
            echo "‚ùå Arquivos .env encontrados no reposit√≥rio"
            exit 1
          else
            echo "‚úÖ Nenhum arquivo .env encontrado"
          fi

      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install -r @project-core/requirements.txt

      - name: VIBECODE System Validation
        run: |
          echo "üß† VIBECODE SYSTEM V4.0 - Security & Validation"

          # Architecture validation
          echo "üèóÔ∏è Validando arquitetura..."
          python @project-core/automation/architecture_manager.py --validate-structure

          # System health check
          echo "üè• Verificando sa√∫de do sistema..."
          python @project-core/automation/validation_suite.py --health-check

          # Dependency check
          echo "üì¶ Verificando depend√™ncias..."
          python @project-core/automation/dependency_check.py --check-all

          echo "‚úÖ Valida√ß√£o VIBECODE conclu√≠da"
