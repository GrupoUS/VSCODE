name: VIBECODE Automation V4.0

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Executa diariamente às 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      comprehensive_test:
        description: 'Executar testes abrangentes'
        required: false
        default: 'false'
        type: boolean
      cleanup_system:
        description: 'Executar limpeza do sistema'
        required: false
        default: 'false'
        type: boolean

jobs:
  vibecode-validation:
    name: VIBECODE System Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r @project-core/requirements.txt

      - name: 🏗️ Architecture Validation
        run: |
          echo "🧠 VIBECODE SYSTEM V4.0 - Architecture Validation"
          python @project-core/automation/architecture_manager.py --validate-structure

          if [ $? -eq 0 ]; then
            echo "✅ Arquitetura validada com sucesso"
          else
            echo "❌ Falha na validação de arquitetura"
            exit 1
          fi

      - name: 🏥 System Health Check
        run: |
          echo "🏥 Verificando saúde do sistema..."
          python @project-core/automation/validation_suite.py --health-check --detailed

          if [ $? -eq 0 ]; then
            echo "✅ Sistema saudável"
          else
            echo "⚠️ Problemas de saúde detectados"
          fi

      - name: 📋 Dependency Verification
        run: |
          echo "📦 Verificando dependências..."
          python @project-core/automation/dependency_check.py --check-all

          if [ $? -eq 0 ]; then
            echo "✅ Dependências OK"
          else
            echo "❌ Problemas de dependência detectados"
            exit 1
          fi

      - name: 🧪 Final Test Suite
        run: |
          echo "🚀 Executando teste final..."

          if [ "${{ github.event.inputs.comprehensive_test }}" = "true" ]; then
            python @project-core/automation/validation_suite.py --final-test --comprehensive --generate-report
          else
            python @project-core/automation/validation_suite.py --final-test --generate-report
          fi

          if [ $? -eq 0 ]; then
            echo "✅ Teste final passou"
          else
            echo "❌ Teste final falhou"
            exit 1
          fi

      - name: 🧹 System Cleanup (Optional)
        if: github.event.inputs.cleanup_system == 'true'
        run: |
          echo "🧹 Executando limpeza do sistema..."
          python @project-core/automation/system_cleanup.py --cleanup-cache --consolidate-backups --dry-run

          echo "✅ Limpeza concluída (dry-run)"

      - name: 📊 Generate Reports
        run: |
          echo "📊 Gerando relatórios..."

          # Criar diretório de relatórios se não existir
          mkdir -p @project-core/reports

          # Análise de métricas de aprendizado
          python @project-core/automation/learning_optimizer.py --analyze-metrics --days=7

          # Escanear oportunidades de otimização
          python @project-core/automation/learning_optimizer.py --scan-opportunities

          echo "✅ Relatórios gerados"

      - name: 📤 Upload Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vibecode-reports-${{ github.run_number }}
          path: |
            @project-core/reports/
            @project-core/logs/
          retention-days: 30

  sync-validation:
    name: Repository Sync Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r @project-core/requirements.txt

      - name: 🔄 Validate Sync Status
        run: |
          echo "🔍 Validando status de sincronização..."
          python @project-core/automation/sync_manager.py --validate

          if [ $? -eq 0 ]; then
            echo "✅ Sincronização validada"
          else
            echo "⚠️ Problemas de sincronização detectados"
          fi

      - name: 🚫 Check Unnecessary Branches
        run: |
          echo "🚫 Verificando branches desnecessárias..."
          python @project-core/automation/sync_manager.py --prevent-branches --check-only

          if [ $? -eq 0 ]; then
            echo "✅ Estrutura de branches OK"
          else
            echo "⚠️ Branches desnecessárias detectadas"
          fi

  learning-optimization:
    name: Learning System Optimization
    runs-on: ubuntu-latest
    if: github.event.schedule

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r @project-core/requirements.txt

      - name: 🧠 Activate Learning System
        run: |
          echo "🧠 Ativando sistema de aprendizado..."
          SESSION_ID="github-action-$(date +%Y%m%d-%H%M%S)"
          python @project-core/automation/learning_optimizer.py --activate --session-id="$SESSION_ID"

          echo "✅ Sistema de aprendizado ativado: $SESSION_ID"

      - name: 📊 Analyze Learning Metrics
        run: |
          echo "📊 Analisando métricas de aprendizado..."
          python @project-core/automation/learning_optimizer.py --analyze-metrics --days=30 --detailed

          echo "✅ Análise de métricas concluída"

      - name: 🔍 Scan Optimization Opportunities
        run: |
          echo "🔍 Escaneando oportunidades de otimização..."
          python @project-core/automation/learning_optimizer.py --scan-opportunities

          echo "✅ Escaneamento concluído"

      - name: ⚡ Execute Safe Optimizations
        run: |
          echo "⚡ Executando otimizações seguras..."

          # Apenas otimizações de baixo risco
          python @project-core/automation/system_cleanup.py --cleanup-cache --dry-run
          python @project-core/automation/system_cleanup.py --consolidate-backups --dry-run

          echo "✅ Otimizações seguras executadas (dry-run)"

      - name: 📈 Generate Learning Report
        run: |
          echo "📈 Gerando relatório de aprendizado..."

          # Criar timestamp para o relatório
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)

          # Criar relatório consolidado
          echo "# Relatório de Aprendizado - $TIMESTAMP" > @project-core/reports/learning_report_$TIMESTAMP.md
          echo "" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "**Gerado por**: GitHub Actions" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "**Data**: $(date -u)" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "## Status do Sistema" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "- ✅ Sistema de aprendizado ativo" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "- ✅ Métricas analisadas" >> @project-core/reports/learning_report_$TIMESTAMP.md
          echo "- ✅ Oportunidades identificadas" >> @project-core/reports/learning_report_$TIMESTAMP.md

          echo "✅ Relatório gerado: learning_report_$TIMESTAMP.md"

                    - name: 📤 Upload Learning Reports
         uses: actions/upload-artifact@v4
         with:
           name: learning-reports-${{ github.run_number }}
           path: "@project-core/reports/learning_report_*.md"
           retention-days: 90
