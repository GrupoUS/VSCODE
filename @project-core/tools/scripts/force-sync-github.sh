#!/bin/bash

# üîí SCRIPT DE ALTO RISCO: SINCRONIZA√á√ÉO FOR√áADA COM O GITHUB üîí
# Use com extrema cautela. Este script ir√° reescrever o hist√≥rico da branch remota.
# GRUPO US VIBECODE SYSTEM V2.0 - Git Force Synchronization Script

# Verifica se o nome da branch foi fornecido como argumento
if [ -z "$1" ]; then
  echo "‚ùå Erro: O nome da branch √© obrigat√≥rio."
  echo "Uso: ./scripts/force-sync-github.sh <nome-da-branch>"
  exit 1
fi

BRANCH_NAME=$1

echo "------------------------------------------------------------------"
echo "‚ö†Ô∏è ATEN√á√ÉO: PRESTES A FOR√áAR A SINCRONIZA√á√ÉO COM O GITHUB ‚ö†Ô∏è"
echo "Branch Alvo: $BRANCH_NAME"
echo "Workspace: $(pwd)"
echo "------------------------------------------------------------------"
echo ""
echo "üîç VERIFICA√á√ïES DE SEGURAN√áA:"
echo "1. Verificando se .gitignore existe e est√° configurado..."

# Verifica se .gitignore existe
if [ ! -f ".gitignore" ]; then
    echo "‚ùå ERRO: Arquivo .gitignore n√£o encontrado!"
    echo "Por favor, crie um arquivo .gitignore antes de continuar."
    exit 1
fi

echo "‚úÖ .gitignore encontrado"
echo ""
echo "üìã CONTE√öDO ATUAL DO .gitignore (primeiras 20 linhas):"
head -20 .gitignore
echo ""
echo "‚ö†Ô∏è IMPORTANTE: Verifique se arquivos sens√≠veis (.env, chaves API, etc.) est√£o no .gitignore"
echo ""

# Mostra status atual do git
echo "üìä STATUS ATUAL DO GIT:"
git status --short
echo ""

# Confirma√ß√£o dupla para seguran√ßa
echo "üö® CONFIRMA√á√ÉO DE SEGURAN√áA üö®"
echo "Esta opera√ß√£o ir√°:"
echo "  - Adicionar TODOS os arquivos n√£o ignorados ao staging"
echo "  - Criar um commit com timestamp atual"
echo "  - For√ßar push para '$BRANCH_NAME' (reescrevendo hist√≥rico remoto)"
echo ""
read -p "Voc√™ verificou o .gitignore e tem CERTEZA que deseja continuar? (digite 'CONFIRMO'): " -r
echo

if [[ ! $REPLY == "CONFIRMO" ]]; then
    echo "‚ùå Sincroniza√ß√£o cancelada. (Resposta: '$REPLY')"
    echo "Para confirmar, digite exatamente: CONFIRMO"
    exit 1
fi

echo "‚úÖ Iniciando sincroniza√ß√£o for√ßada..."
echo ""

# Adiciona todos os arquivos ao staging area
echo "üì¶ Adicionando arquivos ao staging..."
git add .
echo "‚úÖ Todos os arquivos foram adicionados ao stage."

# Cria um commit com uma mensagem padr√£o
COMMIT_MESSAGE="chore: Sincroniza√ß√£o bilateral for√ßada - $(date '+%Y-%m-%d %H:%M:%S')"
echo "üíæ Criando commit..."
git commit -m "$COMMIT_MESSAGE" --no-verify
COMMIT_RESULT=$?

if [ $COMMIT_RESULT -eq 0 ]; then
    echo "‚úÖ Commit criado: \"$COMMIT_MESSAGE\""
elif [ $COMMIT_RESULT -eq 1 ]; then
    echo "‚ÑπÔ∏è Nenhuma altera√ß√£o para commit (working tree limpo)"
    echo "üîÑ Prosseguindo com push para garantir sincroniza√ß√£o..."
else
    echo "‚ùå Erro ao criar commit (c√≥digo: $COMMIT_RESULT)"
    exit 1
fi

# For√ßa o push para a branch remota usando --force-with-lease para seguran√ßa
echo ""
echo "üöÄ Executando push para a branch remota '$BRANCH_NAME'..."
echo "Usando --force-with-lease para seguran√ßa adicional..."

git push origin "$BRANCH_NAME" --force-with-lease
PUSH_RESULT=$?

echo ""
if [ $PUSH_RESULT -eq 0 ]; then
    echo "üéâ SINCRONIZA√á√ÉO BILATERAL FOR√áADA CONCLU√çDA COM SUCESSO!"
    echo "‚úÖ Branch '$BRANCH_NAME' sincronizada com o reposit√≥rio remoto"
    echo "üìä Status final:"
    git status --short
else
    echo "‚ùå ERRO no push (c√≥digo: $PUSH_RESULT)"
    echo "Poss√≠veis causas:"
    echo "  - Branch remota foi atualizada por outro colaborador"
    echo "  - Problemas de conectividade"
    echo "  - Permiss√µes insuficientes"
    echo ""
    echo "üí° Sugest√£o: Execute 'git fetch' e tente novamente"
    exit 1
fi

echo ""
echo "üîí SINCRONIZA√á√ÉO CONCLU√çDA - $(date '+%Y-%m-%d %H:%M:%S')"
