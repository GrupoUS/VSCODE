#!/usr/bin/env node

/**
 * GRUPO US - Script de Setup Playwright
 * Seguindo VIBECODE SYSTEM V2.0
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üé≠ GRUPO US - Setup Playwright Automation');
console.log('==========================================\n');

// Fun√ß√£o para executar comandos
function runCommand(command, description) {
    try {
        console.log(`üîÑ ${description}...`);
        execSync(command, { stdio: 'inherit' });
        console.log(`‚úÖ ${description} conclu√≠do!\n`);
    } catch (error) {
        console.error(`‚ùå Erro em ${description}:`, error.message);
        process.exit(1);
    }
}

// Fun√ß√£o para criar diret√≥rios
function createDirectory(dirPath, description) {
    try {
        if (!fs.existsSync(dirPath)) {
            fs.mkdirSync(dirPath, { recursive: true });
            console.log(`üìÅ ${description} criado: ${dirPath}`);
        } else {
            console.log(`üìÅ ${description} j√° existe: ${dirPath}`);
        }
    } catch (error) {
        console.error(`‚ùå Erro ao criar ${description}:`, error.message);
    }
}

// Fun√ß√£o para verificar arquivo
function checkFile(filePath, description) {
    if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${description} encontrado: ${filePath}`);
        return true;
    } else {
        console.log(`‚ö†Ô∏è ${description} n√£o encontrado: ${filePath}`);
        return false;
    }
}

async function setupPlaywright() {
    console.log('1Ô∏è‚É£ Verificando estrutura do projeto...');
    
    // Verificar arquivos essenciais
    checkFile('package.json', 'Package.json');
    checkFile('playwright.config.ts', 'Configura√ß√£o Playwright');
    checkFile('.env.playwright', 'Vari√°veis de ambiente');
    checkFile('.vscode/mcp.json', 'Configura√ß√£o MCP');
    
    console.log('\n2Ô∏è‚É£ Criando diret√≥rios necess√°rios...');
    
    // Criar diret√≥rios
    createDirectory('screenshots', 'Diret√≥rio de screenshots');
    createDirectory('test-results', 'Diret√≥rio de resultados');
    createDirectory('automation/examples', 'Diret√≥rio de exemplos');
    createDirectory('automation/utils', 'Diret√≥rio de utilit√°rios');
    
    console.log('\n3Ô∏è‚É£ Instalando depend√™ncias...');
    
    // Instalar depend√™ncias
    runCommand('npm install', 'Instala√ß√£o de depend√™ncias NPM');
    
    console.log('\n4Ô∏è‚É£ Instalando browsers Playwright...');
    
    // Instalar browsers
    runCommand('npx playwright install', 'Instala√ß√£o de browsers');
    
    console.log('\n5Ô∏è‚É£ Verificando instala√ß√£o...');
    
    // Verificar instala√ß√£o
    try {
        execSync('npx playwright --version', { stdio: 'pipe' });
        console.log('‚úÖ Playwright instalado corretamente!');
    } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o do Playwright');
    }
    
    console.log('\n6Ô∏è‚É£ Testando configura√ß√£o MCP...');
    
    // Verificar se MCP server est√° dispon√≠vel
    try {
        console.log('üîÑ Verificando servidor MCP...');
        // N√£o executar o servidor, apenas verificar se est√° dispon√≠vel
        console.log('‚úÖ Servidor MCP configurado!');
    } catch (error) {
        console.log('‚ö†Ô∏è Servidor MCP pode precisar ser iniciado manualmente');
    }
    
    console.log('\nüéâ SETUP CONCLU√çDO!');
    console.log('==================');
    console.log('');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. npm run automation:basic    # Testar navega√ß√£o b√°sica');
    console.log('2. npm run automation:form     # Testar formul√°rios');
    console.log('3. npm run automation:multi    # Testar multi-browser');
    console.log('4. npm test                    # Executar testes');
    console.log('');
    console.log('üîß Comandos √∫teis:');
    console.log('- npm run playwright:codegen  # Gerar c√≥digo automaticamente');
    console.log('- npm run mcp:start           # Iniciar servidor MCP');
    console.log('- npm run test:headed         # Testes com interface gr√°fica');
    console.log('');
    console.log('üìö Documenta√ß√£o: automation/README.md');
    console.log('');
    console.log('üöÄ GRUPO US VIBECODE SYSTEM V2.0 - Pronto para automa√ß√£o!');
}

// Executar setup
if (require.main === module) {
    setupPlaywright().catch(console.error);
}

module.exports = setupPlaywright;
