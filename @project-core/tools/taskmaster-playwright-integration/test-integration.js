/**
 * GRUPO US - Teste de Integra√ß√£o TaskMaster + Playwright
 * Seguindo VIBECODE SYSTEM V2.0
 */

const TaskMasterPlaywrightIntegration = require('./index');

async function testIntegration() {
    console.log('üß™ TESTE DE INTEGRA√á√ÉO TASKMASTER + PLAYWRIGHT');
    console.log('===============================================\n');

    const integration = new TaskMasterPlaywrightIntegration({
        playwright: {
            headless: false,
            timeout: 15000,
            screenshotsPath: './screenshots',
            reportsPath: './reports'
        }
    });

    try {
        // 1. Inicializar integra√ß√£o
        console.log('1Ô∏è‚É£ Inicializando integra√ß√£o...');
        const initResult = await integration.initialize();
        
        if (!initResult.success) {
            throw new Error(`Falha na inicializa√ß√£o: ${initResult.error}`);
        }
        
        console.log('‚úÖ Integra√ß√£o inicializada com sucesso!\n');

        // 2. Testar automa√ß√£o b√°sica
        console.log('2Ô∏è‚É£ Testando automa√ß√£o b√°sica...');
        const basicResult = await integration.executeAutomationTask(
            'Navegar para example.com e capturar screenshot',
            { browser: 'chromium', stepDelay: 1000 }
        );
        
        if (basicResult.success) {
            console.log('‚úÖ Automa√ß√£o b√°sica executada com sucesso!');
            console.log(`   Resultado: ${JSON.stringify(basicResult.result, null, 2)}`);
        } else {
            console.log('‚ùå Falha na automa√ß√£o b√°sica:', basicResult.error);
        }
        console.log('');

        // 3. Testar automa√ß√£o de formul√°rio
        console.log('3Ô∏è‚É£ Testando automa√ß√£o de formul√°rio...');
        const formResult = await integration.executeAutomationTask(
            'Navegar para httpbin.org/forms/post, preencher formul√°rio e capturar screenshot',
            { browser: 'chromium', stepDelay: 2000 }
        );
        
        if (formResult.success) {
            console.log('‚úÖ Automa√ß√£o de formul√°rio executada com sucesso!');
        } else {
            console.log('‚ùå Falha na automa√ß√£o de formul√°rio:', formResult.error);
        }
        console.log('');

        // 4. Verificar status
        console.log('4Ô∏è‚É£ Verificando status da integra√ß√£o...');
        const status = integration.getStatus();
        console.log('üìä Status atual:');
        console.log(`   Inicializado: ${status.initialized}`);
        console.log(`   Tarefas no hist√≥rico: ${status.taskHistory}`);
        console.log(`   M√©tricas: ${JSON.stringify(status.metrics, null, 2)}`);
        console.log('');

        // 5. Gerar relat√≥rio
        console.log('5Ô∏è‚É£ Gerando relat√≥rio...');
        const report = await integration.generateTaskMasterReport();
        console.log('‚úÖ Relat√≥rio gerado com sucesso!');
        console.log(`   Taxa de sucesso: ${report.metrics.successRate}%`);
        console.log(`   Tempo m√©dio de execu√ß√£o: ${report.metrics.averageExecutionTime}ms`);
        console.log('');

        // 6. Cleanup
        console.log('6Ô∏è‚É£ Executando cleanup...');
        await integration.cleanup();
        console.log('‚úÖ Cleanup conclu√≠do!');
        console.log('');

        console.log('üéâ TESTE DE INTEGRA√á√ÉO CONCLU√çDO COM SUCESSO!');
        console.log('============================================');
        console.log('');
        console.log('üìã Resumo:');
        console.log(`   ‚úÖ Integra√ß√£o inicializada`);
        console.log(`   ‚úÖ Automa√ß√£o b√°sica testada`);
        console.log(`   ‚úÖ Automa√ß√£o de formul√°rio testada`);
        console.log(`   ‚úÖ Status verificado`);
        console.log(`   ‚úÖ Relat√≥rio gerado`);
        console.log(`   ‚úÖ Cleanup executado`);
        console.log('');
        console.log('üöÄ A integra√ß√£o TaskMaster + Playwright est√° funcionando perfeitamente!');

    } catch (error) {
        console.error('‚ùå ERRO NO TESTE DE INTEGRA√á√ÉO:', error.message);
        console.error('Stack trace:', error.stack);
        
        // Tentar cleanup mesmo em caso de erro
        try {
            await integration.cleanup();
        } catch (cleanupError) {
            console.error('‚ùå Erro no cleanup:', cleanupError.message);
        }
        
        process.exit(1);
    }
}

// Executar teste se chamado diretamente
if (require.main === module) {
    testIntegration();
}

module.exports = testIntegration;
