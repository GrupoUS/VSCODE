/**
 * PLAYWRIGHT TEST GENERATOR - GRUPO US VIBECODE SYSTEM
 * 
 * Sistema automatizado para geração de testes Playwright usando MCP Microsoft oficial
 * Integra com TaskMaster, Figma e Supabase para testes completos
 * 
 * @version 1.0
 * @author GRUPO US - VIBECODE SYSTEM
 */

const fs = require('fs').promises;
const path = require('path');

class PlaywrightTestGenerator {
    constructor() {
        this.outputDir = '@project-core/automation/generated-tests';
        this.templatesDir = '@project-core/automation/test-templates';
        this.confidence = 9; // Confidence level for generated tests
    }

    /**
     * Gera teste Playwright usando MCP browser_generate_playwright_test
     */
    async generateTest(testConfig) {
        try {
            console.log(`🧪 Generating Playwright test: ${testConfig.name}`);
            
            // Usar MCP tool para geração
            const testCode = await this.callMCPTestGenerator(testConfig);
            
            // Aplicar templates GRUPO US
            const enhancedTest = await this.applyGrupoUSTemplates(testCode, testConfig);
            
            // Salvar arquivo de teste
            const filename = this.generateFilename(testConfig.name);
            const filepath = path.join(this.outputDir, filename);
            
            await fs.writeFile(filepath, enhancedTest, 'utf8');
            
            console.log(`✅ Test generated successfully: ${filepath}`);
            return { success: true, filepath, testCode: enhancedTest };
            
        } catch (error) {
            console.error(`❌ Error generating test: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    /**
     * Chama MCP tool browser_generate_playwright_test
     */
    async callMCPTestGenerator(config) {
        // Simula chamada MCP (será substituída por integração real)
        const mcpRequest = {
            tool: 'browser_generate_playwright_test',
            parameters: {
                name: config.name,
                description: config.description,
                steps: config.steps,
                baseUrl: config.baseUrl || 'http://localhost:3000',
                viewport: config.viewport || { width: 1280, height: 720 },
                timeout: config.timeout || 30000
            }
        };

        // Template base gerado pelo MCP
        return this.generateBaseTest(mcpRequest.parameters);
    }

    /**
     * Gera teste base usando padrões Microsoft Playwright
     */
    generateBaseTest(params) {
        return `import { test, expect } from '@playwright/test';

/**
 * ${params.description}
 * 
 * Generated by: Playwright MCP Microsoft Official
 * Enhanced by: GRUPO US VIBECODE SYSTEM
 * Confidence: ${this.confidence}/10
 */

test.describe('${params.name}', () => {
    test.beforeEach(async ({ page }) => {
        // Setup viewport
        await page.setViewportSize(${JSON.stringify(params.viewport)});
        
        // Navigate to base URL
        await page.goto('${params.baseUrl}');
        
        // Wait for page load
        await page.waitForLoadState('networkidle');
    });

    test('${params.name.toLowerCase().replace(/\s+/g, '-')}', async ({ page }) => {
        ${this.generateTestSteps(params.steps)}
    });

    test.afterEach(async ({ page }) => {
        // Cleanup
        await page.close();
    });
});`;
    }

    /**
     * Gera steps do teste baseado na configuração
     */
    generateTestSteps(steps) {
        return steps.map((step, index) => {
            const stepComment = `        // Step ${index + 1}: ${step}`;
            const stepCode = this.convertStepToCode(step);
            return `${stepComment}\n        ${stepCode}`;
        }).join('\n\n');
    }

    /**
     * Converte step em código Playwright
     */
    convertStepToCode(step) {
        const stepLower = step.toLowerCase();
        
        if (stepLower.includes('navigate')) {
            const url = this.extractUrl(step) || "'/'";
            return `await page.goto(${url});`;
        }
        
        if (stepLower.includes('click')) {
            const selector = this.extractSelector(step) || "'button'";
            return `await page.click(${selector});`;
        }
        
        if (stepLower.includes('fill') || stepLower.includes('type')) {
            const selector = this.extractSelector(step) || "'input'";
            const text = this.extractText(step) || "'test text'";
            return `await page.fill(${selector}, ${text});`;
        }
        
        if (stepLower.includes('wait')) {
            const text = this.extractText(step);
            if (text) {
                return `await page.waitForSelector('text=${text}');`;
            }
            return `await page.waitForTimeout(2000);`;
        }
        
        if (stepLower.includes('verify') || stepLower.includes('expect')) {
            const text = this.extractText(step) || "'expected text'";
            return `await expect(page.locator('text=${text}')).toBeVisible();`;
        }
        
        if (stepLower.includes('screenshot')) {
            return `await page.screenshot({ path: 'test-results/screenshot-${Date.now()}.png' });`;
        }
        
        // Default action
        return `// TODO: Implement step - ${step}`;
    }

    /**
     * Aplica templates específicos do GRUPO US
     */
    async applyGrupoUSTemplates(baseTest, config) {
        let enhancedTest = baseTest;
        
        // Adicionar imports GRUPO US
        enhancedTest = this.addGrupoUSImports(enhancedTest);
        
        // Adicionar configurações específicas
        enhancedTest = this.addGrupoUSConfig(enhancedTest, config);
        
        // Adicionar helpers
        enhancedTest = this.addGrupoUSHelpers(enhancedTest);
        
        return enhancedTest;
    }

    /**
     * Adiciona imports específicos GRUPO US
     */
    addGrupoUSImports(testCode) {
        const imports = `import { test, expect } from '@playwright/test';
import { GrupoUSTestHelpers } from '../helpers/grupo-us-helpers';
import { SupabaseTestUtils } from '../helpers/supabase-utils';
import { FigmaComponentValidator } from '../helpers/figma-validator';

`;
        return testCode.replace("import { test, expect } from '@playwright/test';", imports);
    }

    /**
     * Adiciona configurações GRUPO US
     */
    addGrupoUSConfig(testCode, config) {
        const grupoUSConfig = `
    test.beforeEach(async ({ page }) => {
        // GRUPO US specific setup
        await GrupoUSTestHelpers.setupAuthentication(page);
        await GrupoUSTestHelpers.setupViewport(page);
        await GrupoUSTestHelpers.setupNetworkInterception(page);
        
        // Setup viewport
        await page.setViewportSize({ width: 1280, height: 720 });
        
        // Navigate to base URL
        await page.goto('${config.baseUrl || 'http://localhost:3000'}');
        
        // Wait for page load
        await page.waitForLoadState('networkidle');
        
        // Verify GRUPO US branding
        await expect(page.locator('[data-testid="grupo-us-logo"]')).toBeVisible();
    });`;
        
        return testCode.replace(/test\.beforeEach\(async \(\{ page \}\) => \{[\s\S]*?\}\);/, grupoUSConfig);
    }

    /**
     * Adiciona helpers GRUPO US
     */
    addGrupoUSHelpers(testCode) {
        const helpers = `
    // GRUPO US Test Helpers
    const helpers = new GrupoUSTestHelpers(page);
    const supabase = new SupabaseTestUtils();
    const figma = new FigmaComponentValidator();`;
        
        return testCode.replace("test('", helpers + "\n\n    test('");
    }

    /**
     * Extrai URL do step
     */
    extractUrl(step) {
        const urlMatch = step.match(/https?:\/\/[^\s]+/);
        return urlMatch ? `'${urlMatch[0]}'` : null;
    }

    /**
     * Extrai seletor do step
     */
    extractSelector(step) {
        // Procura por seletores comuns
        const selectors = [
            /\[data-testid="([^"]+)"\]/,
            /\[aria-label="([^"]+)"\]/,
            /\[placeholder="([^"]+)"\]/,
            /#([a-zA-Z][\w-]*)/,
            /\.([a-zA-Z][\w-]*)/
        ];
        
        for (const regex of selectors) {
            const match = step.match(regex);
            if (match) {
                return `'${match[0]}'`;
            }
        }
        
        return null;
    }

    /**
     * Extrai texto do step
     */
    extractText(step) {
        const textMatch = step.match(/"([^"]+)"/);
        return textMatch ? `'${textMatch[1]}'` : null;
    }

    /**
     * Gera nome de arquivo para o teste
     */
    generateFilename(testName) {
        const sanitized = testName
            .toLowerCase()
            .replace(/[^a-z0-9\s]/g, '')
            .replace(/\s+/g, '-');
        return `${sanitized}.spec.ts`;
    }

    /**
     * Gera múltiplos testes baseado em configuração
     */
    async generateTestSuite(suiteConfig) {
        const results = [];
        
        for (const testConfig of suiteConfig.tests) {
            const result = await this.generateTest({
                ...testConfig,
                baseUrl: suiteConfig.baseUrl,
                timeout: suiteConfig.timeout
            });
            results.push(result);
        }
        
        // Gerar arquivo de configuração da suite
        await this.generateSuiteConfig(suiteConfig, results);
        
        return results;
    }

    /**
     * Gera configuração da suite de testes
     */
    async generateSuiteConfig(suiteConfig, results) {
        const config = {
            name: suiteConfig.name,
            description: suiteConfig.description,
            baseUrl: suiteConfig.baseUrl,
            timeout: suiteConfig.timeout,
            tests: results.filter(r => r.success).map(r => r.filepath),
            generated: new Date().toISOString(),
            confidence: this.confidence
        };
        
        const configPath = path.join(this.outputDir, `${suiteConfig.name}-suite.json`);
        await fs.writeFile(configPath, JSON.stringify(config, null, 2), 'utf8');
        
        console.log(`✅ Test suite config generated: ${configPath}`);
    }
}

module.exports = { PlaywrightTestGenerator };

// Exemplo de uso
if (require.main === module) {
    const generator = new PlaywrightTestGenerator();
    
    // Exemplo de geração de teste
    const testConfig = {
        name: "User Login Flow",
        description: "Test complete user login functionality",
        baseUrl: "http://localhost:3000",
        steps: [
            "Navigate to login page",
            "Fill email field with 'user@grupous.com'",
            "Fill password field with 'password123'",
            "Click login button",
            "Wait for dashboard to load",
            "Verify user is logged in",
            "Take screenshot of dashboard"
        ]
    };
    
    generator.generateTest(testConfig)
        .then(result => {
            if (result.success) {
                console.log('✅ Test generated successfully!');
            } else {
                console.error('❌ Test generation failed:', result.error);
            }
        });
}
