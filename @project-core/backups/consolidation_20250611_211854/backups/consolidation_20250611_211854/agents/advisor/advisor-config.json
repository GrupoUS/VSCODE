{
  "agent_config": {
    "agent_id": "advisor",
    "name": "Intelligent Advisor Agent",
    "version": "1.0.0",
    "description": "AI agent that recommends optimal tools, patterns, and approaches based on task requirements (Archon-inspired)",
    "model_config": {
      "model": "google/gemini-2.5-pro-exp-03-25",
      "provider": "openrouter",
      "api_key_env": "OPENROUTER_API_KEY",
      "temperature": 0.3,
      "max_tokens": 4096,
      "context_window": 200000,
      "supports_thinking": false,
      "supports_vision": false,
      "supports_function_calling": true
    },
    "specialization": {
      "primary_domains": [
        "tool_recommendation",
        "pattern_analysis",
        "best_practices_guidance",
        "technology_selection",
        "workflow_optimization"
      ],
      "secondary_domains": [
        "performance_optimization",
        "security_assessment",
        "scalability_planning",
        "integration_strategies"
      ],
      "complexity_range": {
        "min": 3,
        "max": 10,
        "optimal": [5, 8]
      }
    },
    "capabilities": {
      "tool_library_access": {
        "mcp_servers_catalog": true,
        "prebuilt_tools_library": true,
        "custom_tools_registry": true,
        "integration_patterns": true
      },
      "recommendation_engine": {
        "context_analysis": true,
        "requirement_matching": true,
        "performance_prediction": true,
        "cost_optimization": true
      },
      "knowledge_base": {
        "framework_expertise": ["Next.js", "React", "Laravel", "Supabase", "Node.js"],
        "mcp_integrations": ["Sequential Thinking", "MCP Shrimp", "think-mcp-server", "Playwright", "Figma"],
        "design_patterns": ["MVC", "Repository", "Factory", "Observer", "Strategy"],
        "architectural_patterns": ["Microservices", "Serverless", "JAMstack", "Event-Driven"]
      }
    },
    "mcp_integration": {
      "required_servers": [
        "think_think-mcp-server",
        "mcp-shrimp-task-manager"
      ],
      "optional_servers": [
        "sequentialthinking_tools_mcp-sequentialthinking-tools",
        "render-mermaid"
      ],
      "tool_permissions": {
        "analysis": ["think", "analyze_task"],
        "recommendations": ["plan_task", "split_tasks"],
        "documentation": ["render-mermaid"]
      }
    },
    "recommendation_framework": {
      "analysis_criteria": [
        "task_complexity",
        "performance_requirements",
        "security_needs",
        "scalability_demands",
        "integration_complexity",
        "maintenance_overhead"
      ],
      "scoring_weights": {
        "functionality": 0.30,
        "performance": 0.25,
        "maintainability": 0.20,
        "security": 0.15,
        "cost": 0.10
      },
      "recommendation_types": [
        "tools_and_libraries",
        "architectural_patterns",
        "implementation_strategies",
        "optimization_techniques",
        "testing_approaches"
      ]
    },
    "tool_library": {
      "categories": {
        "development": {
          "frontend": ["React", "Next.js", "Tailwind CSS", "shadcn/ui"],
          "backend": ["Laravel", "Node.js", "Fastify", "Express"],
          "database": ["Supabase", "PostgreSQL", "Redis", "Prisma"],
          "testing": ["Jest", "Playwright", "Cypress", "Vitest"]
        },
        "mcp_servers": {
          "reasoning": ["Sequential Thinking", "think-mcp-server"],
          "coordination": ["MCP Shrimp Task Manager"],
          "automation": ["Playwright MCP", "Figma MCP"],
          "search": ["Context7 MCP", "Perplexity Search"]
        },
        "patterns": {
          "architectural": ["Clean Architecture", "Hexagonal", "CQRS", "Event Sourcing"],
          "design": ["Factory", "Strategy", "Observer", "Repository"],
          "integration": ["API Gateway", "Message Queue", "Event Bus", "Circuit Breaker"]
        }
      },
      "selection_algorithm": {
        "context_matching": 0.40,
        "performance_score": 0.25,
        "compatibility": 0.20,
        "learning_curve": 0.15
      }
    },
    "performance_metrics": {
      "recommendation_accuracy": 0.85,
      "user_satisfaction": 0.90,
      "implementation_success_rate": 0.80,
      "time_to_recommendation": "15_seconds"
    },
    "learning_system": {
      "feedback_collection": true,
      "recommendation_tracking": true,
      "success_rate_monitoring": true,
      "pattern_evolution": true,
      "memory_integration": {
        "read_from": "@project-core/memory/",
        "write_to": "@project-core/memory/advisor-learning/",
        "pattern_library": "@project-core/memory/learning/pattern-library.json"
      }
    }
  },
  "operational_rules": {
    "recommendation_process": {
      "analyze_requirements": true,
      "consult_knowledge_base": true,
      "score_alternatives": true,
      "provide_rationale": true,
      "suggest_alternatives": true
    },
    "quality_assurance": {
      "validate_recommendations": true,
      "check_compatibility": true,
      "assess_risks": true,
      "provide_migration_paths": true
    },
    "continuous_improvement": {
      "track_outcomes": true,
      "update_knowledge_base": true,
      "refine_algorithms": true,
      "learn_from_feedback": true
    }
  }
}
