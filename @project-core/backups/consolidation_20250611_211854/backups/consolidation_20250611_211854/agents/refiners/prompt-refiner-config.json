{
  "agent_config": {
    "agent_id": "prompt_refiner",
    "name": "Prompt Optimization Specialist",
    "version": "1.0.0",
    "description": "Specialized agent for optimizing system prompts and instructions (Archon-inspired)",
    "model_config": {
      "model": "anthropic/claude-sonnet-4",
      "provider": "openrouter",
      "api_key_env": "OPENROUTER_API_KEY",
      "temperature": 0.2,
      "max_tokens": 8192,
      "context_window": 200000,
      "supports_thinking": true,
      "supports_vision": false,
      "supports_function_calling": true
    },
    "specialization": {
      "primary_domains": [
        "prompt_engineering",
        "instruction_optimization",
        "context_enhancement",
        "clarity_improvement",
        "performance_tuning"
      ],
      "secondary_domains": [
        "linguistic_analysis",
        "cognitive_load_reduction",
        "bias_detection",
        "multilingual_optimization"
      ],
      "complexity_range": {
        "min": 4,
        "max": 9,
        "optimal": [5, 7]
      }
    },
    "capabilities": {
      "prompt_analysis": {
        "clarity_assessment": true,
        "specificity_evaluation": true,
        "context_completeness": true,
        "instruction_coherence": true,
        "bias_detection": true
      },
      "optimization_techniques": {
        "chain_of_thought": true,
        "few_shot_examples": true,
        "role_definition": true,
        "constraint_specification": true,
        "output_formatting": true
      },
      "quality_metrics": {
        "response_accuracy": true,
        "consistency_measurement": true,
        "execution_time": true,
        "token_efficiency": true,
        "user_satisfaction": true
      }
    },
    "mcp_integration": {
      "required_servers": [
        "think_think-mcp-server",
        "sequentialthinking_tools_mcp-sequentialthinking-tools"
      ],
      "optional_servers": [
        "mcp-shrimp-task-manager"
      ],
      "tool_permissions": {
        "analysis": ["think", "sequentialthinking"],
        "coordination": ["plan_task", "analyze_task"]
      }
    },
    "optimization_framework": {
      "analysis_dimensions": [
        "clarity_and_specificity",
        "context_completeness",
        "instruction_coherence",
        "cognitive_load",
        "bias_and_fairness",
        "performance_efficiency"
      ],
      "improvement_strategies": [
        "role_clarification",
        "context_enhancement",
        "instruction_decomposition",
        "example_integration",
        "constraint_specification",
        "output_structuring"
      ],
      "validation_criteria": [
        "response_quality",
        "consistency",
        "efficiency",
        "maintainability",
        "scalability"
      ]
    },
    "prompt_patterns": {
      "templates": {
        "system_prompt": {
          "structure": ["role_definition", "context", "instructions", "constraints", "examples"],
          "best_practices": ["clear_role", "specific_context", "actionable_instructions", "explicit_constraints"]
        },
        "task_prompt": {
          "structure": ["objective", "requirements", "format", "validation"],
          "best_practices": ["clear_objective", "measurable_requirements", "structured_format"]
        },
        "chain_of_thought": {
          "structure": ["problem_breakdown", "step_by_step", "reasoning", "conclusion"],
          "best_practices": ["logical_flow", "explicit_reasoning", "clear_transitions"]
        }
      },
      "optimization_rules": [
        "use_active_voice",
        "be_specific_not_vague",
        "provide_clear_examples",
        "define_success_criteria",
        "minimize_ambiguity",
        "structure_information_hierarchically"
      ]
    },
    "performance_metrics": {
      "optimization_success_rate": 0.85,
      "response_quality_improvement": 0.25,
      "token_efficiency_gain": 0.15,
      "consistency_improvement": 0.30
    },
    "learning_system": {
      "pattern_recognition": true,
      "effectiveness_tracking": true,
      "continuous_refinement": true,
      "best_practices_evolution": true,
      "memory_integration": {
        "read_from": "@project-core/memory/",
        "write_to": "@project-core/memory/prompt-optimization/",
        "pattern_library": "@project-core/memory/learning/prompt-patterns.json"
      }
    }
  },
  "operational_rules": {
    "optimization_process": {
      "analyze_current_prompt": true,
      "identify_improvement_areas": true,
      "apply_optimization_techniques": true,
      "validate_improvements": true,
      "document_changes": true
    },
    "quality_assurance": {
      "test_multiple_scenarios": true,
      "measure_performance_impact": true,
      "ensure_backward_compatibility": true,
      "validate_edge_cases": true
    },
    "continuous_improvement": {
      "track_optimization_outcomes": true,
      "update_pattern_library": true,
      "refine_techniques": true,
      "share_learnings": true
    }
  }
}
