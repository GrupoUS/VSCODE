---
description: 
globs: 
alwaysApply: true
---
---
description: "Supabase database schema documentation"
globs: ["**/*.sql", "**/*prisma*", "**/supabase/**"]
alwaysApply: true
version: "1.0.0"
---

# Schema do Banco de Dados - GRUPO US
Version: 1.0.0

## Visão Geral
Banco de dados PostgreSQL no Supabase com RLS habilitado.

## Tabelas Principais

### profiles
```sql
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  email TEXT UNIQUE NOT NULL,
  name TEXT NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('admin', 'owner', 'staff', 'patient')),
  clinic_id UUID REFERENCES clinics(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- RLS
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);
```

### clinics
```sql
CREATE TABLE clinics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  owner_id UUID NOT NULL REFERENCES profiles(id),
  subscription_status TEXT DEFAULT 'trial',
  settings JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- RLS
CREATE POLICY "Clinic members can view" ON clinics
  FOR SELECT USING (
    id IN (
      SELECT clinic_id FROM profiles WHERE id = auth.uid()
    )
  );
```

### patients
```sql
CREATE TABLE patients (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  clinic_id UUID NOT NULL REFERENCES clinics(id),
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  birth_date DATE,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Índices
CREATE INDEX idx_patients_clinic ON patients(clinic_id);
CREATE INDEX idx_patients_name ON patients(name);
```

### appointments
```sql
CREATE TABLE appointments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  clinic_id UUID NOT NULL REFERENCES clinics(id),
  patient_id UUID NOT NULL REFERENCES patients(id),
  staff_id UUID NOT NULL REFERENCES profiles(id),
  service_id UUID REFERENCES services(id),
  start_time TIMESTAMPTZ NOT NULL,
  end_time TIMESTAMPTZ NOT NULL,
  status TEXT DEFAULT 'scheduled',
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Constraints
ALTER TABLE appointments 
  ADD CONSTRAINT valid_time_range 
  CHECK (end_time > start_time);
```

### services
```sql
CREATE TABLE services (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  clinic_id UUID NOT NULL REFERENCES clinics(id),
  name TEXT NOT NULL,
  description TEXT,
  duration_minutes INTEGER NOT NULL,
  price DECIMAL(10,2),
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

## Funções RPC

### get_clinic_stats
```sql
CREATE OR REPLACE FUNCTION get_clinic_stats(clinic_uuid UUID)
RETURNS TABLE (
  total_patients BIGINT,
  total_appointments BIGINT,
  monthly_revenue DECIMAL
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(DISTINCT p.id) as total_patients,
    COUNT(DISTINCT a.id) as total_appointments,
    SUM(s.price) as monthly_revenue
  FROM clinics c
  LEFT JOIN patients p ON p.clinic_id = c.id
  LEFT JOIN appointments a ON a.clinic_id = c.id 
    AND a.start_time >= NOW() - INTERVAL '30 days'
  LEFT JOIN services s ON s.id = a.service_id
  WHERE c.id = clinic_uuid
  GROUP BY c.id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

## Tipos TypeScript (Prisma)
```typescript
model Profile {
  id        String   @id @default(dbgenerated("auth.uid()"))
  email     String   @unique
  name      String
  role      Role
  clinicId  String?  @map("clinic_id")
  clinic    Clinic?  @relation(fields: [clinicId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("profiles")
}

enum Role {
  admin
  owner
  staff
  patient
}
```

## Migrações Pendentes
- Adicionar tabela de produtos
- Adicionar tabela de vendas
- Adicionar sistema de comissões

## Regras Relacionadas
- @memory.mdc: Regras principais do sistema de memória
- @project.mdc: Stack tecnológica e padrões Supabase
- @apis.mdc: Endpoints que consomem estas tabelas
- @self.mdc: Erros comuns com banco de dados
