# Preferences - OPTIMIZED VERSION (TaskMaster References Removed)
- User prefers comprehensive architectural audits with specific phases: reconnaissance/mapping, critical analysis by category, optimized architecture proposals, and executable implementation plans with ≥8/10 confidence level and copy-paste ready commands.
- User prefers implementing systematic learning analysis after major projects, including error documentation, success pattern cataloging, permanent memory storage in knowledge base, self-correction protocols, and continuous improvement frameworks for future development initiatives.
- User prefers implementing self-improving learning systems with real-time error capture, automated knowledge base updates at @project-core/knowledge-base/memory/, pattern recognition for successful methodologies, and continuous validation using validate-system.ps1 and retroactive-corrections.ps1 scripts.
- User prefers comprehensive post-task cleanup methodology including memory bank optimization, configuration validation, documentation consolidation, system health checks, and performance optimization with 100% validation success criteria for maintaining system integrity after major architectural changes.
- User prefers systematic post-audit validation including MCP configuration testing, rule loading verification, and redirection integrity checks as immediate next steps after architectural consolidation.
- User prefers comprehensive post-task validation methodology including task completion verification, error analysis with memory updates, solution documentation, and rule/file updates with correct commands for systematic task closure.
- User requires mandatory post-task validation protocol including script verification, error analysis with memory updates, solution documentation, and automatic rule/file updates with correct commands for systematic task closure.
- User prefers receiving all code as copy-paste ready commands that can be executed automatically by Augment in the terminal.
- For MCP, rules, or workflow implementations, always enhance existing files instead of creating unnecessary new files/folders to maintain performance and avoid excessive text.
- Para integração MCP Sequential Thinking real, usar TODO placeholder com fallback robusto. Implementação deve incluir try-catch com fallback para simulação quando MCP não estiver disponível.
- Sites de referência para verificação recorrente de atualizações: Sequential Thinking MCP (https://github.comcontextprotocol/servers/tree/main/src/sequentialthinking), Cline Sequential Thinking rules (https://github.com/cline/prompts/blob/main/.clinerules/sequential-thinking.md) - verificar mensalmente para self-improvement contínuo.
- Documentação oficial Augment Code disponível em https://docs.augmentcode.com/introduction com informações completas sobre Chat, Next Edit, Instructions, Completions, workspace indexing e guidelines para otimização do uso da extensão.
- User prefers testing startup scripts format for Augment terminal settings with specific automation scripts including cache-cleanup, auto-backup, optimize-build, dependency-check, and post-task-validation with parameters.
- User prefers creating enhanced guidelines focused on error reduction, continuous learning, memory feedback, performance optimization, and API request reduction, building upon existing AUGMENT AGENT GUIDELINES V3.0 structure.
- User prefers a !finaltest command that executes a final validation script to verify all changes were executed, check for errors, learn from them, update memory with solutions and correct commands, and update rules/files with correct commands.
- User prefers implementing systematic rule improvement methodology by comparing with Cline's effective rule-writing guidelines, extracting applicable principles, creating meta-rule protocols for future guideline edits, and establishing quality metrics for rule updates while maintaining MCP architecture compatibility.
- User prefers structured 5-phase protocols for MCP server analysis and optimization: Phase 1 (Official documentation analysis, 2) Current system audit, 3) Comparative gap analysis, 4) Implementation of improvements, 5) Validation and documentation, with confidence ≥8/10 requirements and comprehensive documentation in memory bank.
- User prefers implementing Playwright MCP advanced features in this order: Vision Mode for visual interactions, automatic test generation, and performance optimization with accessibility snapshots.
- User prefers Next.js 15 + React 19 + TypeScript + Supabase + Tailwind CSS + shadcn-ui stack for NEONPRO aesthetic clinic SaaS project, requiring MCP Sequential Thinking integration for planning and execution of complex architectural migrations.
- User prefers using Sequential Thinking MCP for complex migration implementations and Playwright for testing when necessary, specifically for NEONPRO Next.js 15 + React 19 migration project.
- User prefers to work directly in the main @neonpro folder for definitive changes rather than creating separate subfolders like neonpro-v3.
- User prefers to maintain TypeScript configuration files (like next.config.ts) instead of simplifying to JavaScript equivalents.
- User prefers using mcp-sequentialthinking-tools MCP server from https://github.com/xinzhongyouhai/mcp-sequentialthinking-tools and wants it properly configured for their development workflow.
- User prefers implementing a Boomerang multi-agent architecture with specialized AI models: Gemini Flash Thinking for simple tasks, Gemini Pro for project management, Claude Sonnet 4 for complex code creation, coordinated by a master agent that routes tasks to specialized sub-agents, based on Roo Code structure from https://github.com/RooCodeInc/Roo-Code with MCP integration.
- User prefers systematic 4-phase approach for multi-agent system optimization: Phase 1 (rule conflict audit), Phase 2 (performance optimization with 20-30% code reduction), Phase 3 (MCP server diagnostics and unified configuration), Phase 4 (comprehensive validation), with mandatory !finaltest execution and zero tolerance for functionality loss during optimization.
- User prefers implementing Memory Bank MCP system (https://github.com/aakarsh-sasi/memory-bank-mcp) integrated with MCP Shrimp Task Manager for enhanced memory coordination, requiring mandatory pre-execution memory consultation protocols, post-execution automatic memory updates, 20-30% API request reduction targets, and self-improving machine learning capabilities within @project-core structure using Sequential Thinking methodology.
- User prefers Enhanced Memory System V4.0 with integrated mcp-sequentialthinking-tools + Sequential Thinking MCP + MCP Shrimp Task Manager workflow for complex reasoning and task management.
- User prefers structured 4-phase architectural enhancement methodology: Phase 1 (deep research with MCP Context7 and Perplexity), Phase 2 (current system audit), Phase 3 (comparative analysis and enhancement design), Phase 4 (selective implementation), with requirements for ≥8/10 confidence, zero disruption to existing workflows, 20-30% performance improvement targets, and mandatory !finaltest validation.
- Sequential Thinking MCP tools (@modelcontextprotocol/server-sequential-thinking and mcp-sequentialthinking-tools) must be automatically triggered for projects with complexity ≥ 7, and implementation guidelines need updating to ensure proper integration for complex architectural reasoning tasks.
- User prefers using only sequentialthinking_Sequential_Thinking MCP tool (disable sequentialthinking_tools_mcp-sequentialthinking-tools due to connection errors), requires Sequential Thinking integration with Enhanced Memory System V4.0 including access to master_rule.md, self_correction_log.md, global-standards.md, and storage of thoughts in memory bank for future reference.
- User requires comprehensive testing and validation of think-mcp-server and mcp-shrimp-task-manager MCPs for operational status, workflow integration with Enhanced Memory System V4.0, task management capabilities, and compliance with complexity ≥ 7 activation requirements within GRUPO US VIBECODE SYSTEM protocols.
- User prefers 4-phase architectural enhancement methodology for Enhanced Memory System V4.0 using Cognee MCP as reference, confirming Sequential Thinking > think-mcp-server > MCP Shrimp workflow in project guidelines, with 20-30% memory efficiency improvement targets and zero workflow disruption requirements.
- User prefers comprehensive 3-phase cleanup methodology for deprecated system components: Phase 1 (scan and verify complete removal of references), Phase 2 (extract valuable patterns before deletion), Phase 3 (system integrity validation), with mandatory backup creation, dependency verification, and functionality testing after each deletion.
- User prefers 4-phase architectural enhancement methodology for RAG integration: Phase 1 (deep research with MCP Context7 and Perplexity from specific GitHub repos), Phase 2 (current system audit), Phase 3 (strategic integration design), Phase 4 (selective implementation), with requirements for ≥8/10 confidence, zero disruption to existing workflows, 20-30% performance improvement targets, and mandatory !finaltest validation.
- User requires RAG-Enhanced Memory System implementations to maintain 100% backward compatibility with existing workflows, implement comprehensive fallback mechanisms, target specific performance improvements (+30% consultation accuracy, +50% result relevance), and follow GRUPO US VIBECODE SYSTEM protocols for documentation and validation with zero disruption to current operations.
- User prefers Phase 4B RAG implementation with real embedding models (text-embedding-3-large), semantic similarity caching for 45-55% API reduction, knowledge graph foundation preparation, and reranking optimization to 80%+ success rate while maintaining 100% backward compatibility with established Sequential Thinking workflow.
- User prefers 4-phase methodology for MCP server integration: Phase 1 (deep research with MCP Context7 and Perplexity), Phase 2 (current system audit), Phase 3 (diagnostic analysis and root cause investigation), Phase 4 (implementation and integration), with requirements for ≥8/10 confidence, zero workflow disruption, complete memory bank documentation, and !finaltest validation.
- User prefers systematic sequential execution of established task plans, specifically continuing with all remaining tasks in the MCP integration optimization sequence (8 tasks total) to complete full implementation including Phase 4C, maintaining the established Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager protocol throughout.
- User prefers systematic task execution methodology: execute task → validate → document → proceed to next task in sequence, specifically for MCP integration optimization with Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager protocol.
- User prefers systematic MCP integration task execution methodology: execute task → validate → document → proceed to next task in sequence, maintaining Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager protocol with 100% backward compatibility and comprehensive testing validation for multi-phase integration projects.
- User prefers comprehensive final validation methodology for complex system implementations: 1) Execute comprehensive test suite with MCP integration validation, 2) Analyze results and implement missing specialized methods, 3) Expand capabilities with proper error handling, 4) Re-validate and document with target ≥80% success rate while maintaining backward compatibility.
- User prefers systematic 3-phase implementation methodology for complex system optimizations: Phase 1 (missing methods implementation, 60-70% target), Phase 2 (threshold optimization, 80%+ target), Phase 3 (validation framework, 90%+ target), with mandatory Enhanced Memory System V4.0 consultation, Sequential Thinking MCP for complexity ≥7, comprehensive test validation after each phase, and ≥8/10 confidence requirements throughout implementation.
- User prefers 4-phase methodology for MCP tool optimization analysis: Phase 1 (current usage analysis), Phase 2 (documentation research with MCP Context7), Phase 3 (internet research with Perplexity), Phase 4 (integration strategy design), with requirements for ≥8/10 confidence, 20-30% performance improvement targets, 100% backward compatibility, and comprehensive validation methodology for Enhanced Memory System V4.0 workflow optimization.
- User prefers systematic 5-phase methodology for MCP server optimization: Phase 1 (configuration audit), Phase 2 (optimization deployment), Phase 3 (comprehensive validation), Phase 4 (performance monitoring setup), Phase 5 (optimization iteration), with specific success criteria including 75% cache hit rate targets and 20-30% performance improvement expectations.
- User prefers 4-phase system optimization methodology: Phase 1 (guidelines modernization with Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager workflow), Phase 2 (Augment Code configuration optimization for 20-30% performance improvement), Phase 3 (MCP server deduplication with established workflow hierarchy), Phase 4 (comprehensive validation with !finaltest), requiring ≥8/10 confidence and zero workflow disruption.
- User prefers comprehensive MCP workflow integration tests after system optimizations, including MCP server connectivity verification, workflow chain testing (Sequential Thinking → MCP Shrimp → think-mcp-server), complexity-based routing validation (≥7 triggers Sequential Thinking), performance validation for optimization improvements, and documentation of results in self_correction_log.md with post-restart validation reports.
- User prefers 4-phase methodology for Supabase MCP server integration: Phase 1 (research with MCP Context7), Phase 2 (system audit), Phase 3 (secure installation with API key in @project-core/.env/), Phase 4 (validation with !finaltest), requiring ≥8/10 confidence, 100% backward compatibility with Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager workflow, and proper security protocols for API key management.
- User prefers 4-phase methodology for think-mcp-server implementation: Phase 1 (deep research with MCP Context7 and Perplexity), Phase 2 (current system audit), Phase 3 (global installation with permanent configuration), Phase 4 (comprehensive testing and validation), with requirements for ≥8/10 confidence, 100% backward compatibility with Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager workflow, automatic startup without manual activation, and comprehensive memory bank documentation throughout.
- User prefers comprehensive MCP connectivity validation methodology including specific test commands for Supabase (list_projects), think-mcp-server (think command), and Perplexity (ask_perplexity) servers, with Sequential Thinking for diagnosis, memory bank documentation of issues/solutions, and 100% operational status as success criteria.
- User prefers comprehensive 7-step MCP server validation methodology: connectivity test, core functionality test, advanced features test, error handling test, performance validation, Enhanced Memory System V4.0 documentation, and integration verification with Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager workflow, requiring ≥8/10 confidence and results documented in @project-core/memory/self_correction_log.md.
- User prefers using @c:\Users\Admin\AppData\Roaming\Code\.vscode\mcp-master-centralized.json as the main MCP configuration file (not mcp.json) and emphasizes focusing on performance with fewer API requests rather than excessive verification sequences.
- User prefers comprehensive research methodology using MCP Context7 for documentation retrieval, Perplexity for best practices research, and deep analysis of @project-core workflow/rules/routing/self-improvement architecture before implementing solutions.
- User installed Tavily AI MCP server from https://smithery.ai/server/@tavily-ai/tavily-mcp and requires testing for proper functionality.
- User prefers accurate verification of which specific MCP server is being used during tests, not just assuming functionality based on successful results.
- User prefers modifying Augment extension's native MCP configuration directly rather than creating synchronization scripts or monitoring systems for MCP server management.
- User prefers MCP Shrimp Task Manager to use Tavily MCP tools (tavily-search, tavily-extract, tavily-crawl, tavily-map) as default search engine instead of current RESEARCH_MODE_DEFAULT_ENGINE, while maintaining Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager workflow hierarchy.
- User expects visual agent configuration controls to appear in VS Code Settings UI under Augment category or in Augment extension sidebar, and understands that Task 2 (JSON Schema creation) is needed to make the visual interface appear.
- Visual agent configuration interfaces require more than JSON schemas to appear in VS Code Settings UI - they need proper VS Code extension integration and contribution points to generate actual visual controls.
- User prefers 4-phase diagnostic methodology for MCP server connectivity issues: Phase 1 (system audit with MCP Context7 and Tavily research), Phase 2 (connectivity diagnostics with specific test commands), Phase 3 (root cause analysis with think-mcp-server), Phase 4 (implementation and validation), requiring ≥8/10 confidence, zero workflow disruption, and comprehensive documentation in Enhanced Memory System V4.0 for Sequential Thinking MCP troubleshooting.
- User prefers Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager workflow hierarchy and requires Sequential Thinking MCP integration with Enhanced Memory System V4.0 for complex reasoning tasks with complexity ≥7, with proper parameter validation and memory bank storage of results.
- User prefers configuring the multi-agent system (Boomerang, Architect, Coder, Manager, Executor, Researcher) to use Augment's native API and token system instead of OpenRouter for AI model consumption to utilize existing Augment credits for cost optimization, with specific model enforcement per agent (claude-sonnet-4 for complex tasks, gemini-2.5-pro for coordination, gemini-flash for simple tasks) rather than defaulting to Augment's standard model selection.
- User expects MCP Tavily tools to be actively used by Researcher agent for web research capabilities, and MCP Shrimp Task Manager to be actively utilized for task coordination in the Boomerang workflow hierarchy, not just configured as dormant components.
- User prefers 6-phase GitHub security audit methodology: Phase 1 (research and documentation), Phase 2 (repository security audit), Phase 3 (centralized secret management in @project-core/.env/), Phase 4 (GitHub secret cleanup), Phase 5 (MCP configuration compatibility validation), Phase 6 (security validation and documentation), with requirements for zero exposed API keys, 100% MCP server functionality maintenance, ≥8/10 confidence, and !finaltest validation.
- User prefers 4-phase MCP server audit methodology: Phase 1 (configuration analysis of mcp-master-centralized.json), Phase 2 (connectivity validation with specific test commands for each server), Phase 3 (workflow integration audit maintaining Sequential Thinking → think-mcp-server → MCP Shrimp Task Manager hierarchy), Phase 4 (system optimization and documentation), with requirements for ≥8/10 confidence, zero workflow disruption, 20-30% performance improvement targets.
