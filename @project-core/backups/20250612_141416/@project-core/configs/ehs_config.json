{
  "ehs_version": "1.0",
  "system_name": "GRUPO US VIBECODE SYSTEM V4.0 + EHS V1",
  "integration_mode": "orchestration",
  "last_updated": "2025-01-27T16:30:00Z",
  
  "core_configuration": {
    "reuse_target_percentage": 85,
    "max_new_code_percentage": 15,
    "evolution_mode": "continuous_improvement",
    "expansion_control": "strict"
  },
  
  "protected_directories": [
    "@project-core/",
    "@project-core/projects/",
    "@project-core/memory/",
    "@project-core/configs/",
    "@project-core/automation/",
    "@project-core/rules/",
    "@project-core/docs/"
  ],
  
  "critical_files": [
    "@project-core/memory/master_rule.md",
    "@project-core/memory/self_correction_log.md",
    "@project-core/memory/global-standards.md",
    "@project-core/rules/00-protocolo-ehs-v1.md",
    "@project-core/configs/mcp-master-unified.json",
    "@project-core/configs/ehs_config.json"
  ],
  
  "performance_thresholds": {
    "ehs_check_max_seconds": 5,
    "max_overhead_percentage": 10,
    "health_check_timeout": 30,
    "cleanup_timeout": 60,
    "validation_timeout": 45
  },
  
  "auto_healing": {
    "enabled": true,
    "max_attempts": 3,
    "consultation_required": true,
    "memory_bank_integration": true,
    "self_correction_log_path": "@project-core/memory/self_correction_log.md"
  },
  
  "workflow_integration": {
    "phase_0_5_enabled": true,
    "mandatory_modes": ["COMPREHENSIVE", "ENHANCED"],
    "halt_on_failure": true,
    "graceful_degradation": true,
    "error_reporting": "structured_json"
  },
  
  "systems_integration": {
    "reuse_percentage_achieved": 85,
    "integrated_systems": {
      "system_health_check": {
        "path": "@project-core/automation/system_health_check.py",
        "functions": ["test_directory_structure", "test_configuration_files", "test_mcp_integration", "test_memory_bank", "test_legacy_cleanup"],
        "reuse_level": "high"
      },
      "maintenance_manager": {
        "path": "@project-core/automation/tasks/maintenance.py",
        "class": "MaintenanceManager",
        "methods": ["cleanup_system"],
        "reuse_level": "high"
      },
      "mcp_config_validator": {
        "path": "@project-core/automation/validate_mcp_configuration_enhanced.py",
        "class": "MCPConfigValidator",
        "methods": ["comprehensive_validation"],
        "reuse_level": "high"
      },
      "system_validator": {
        "path": "@project-core/automation/validate_system.py",
        "functions": ["test_directory_structure", "test_configuration_files", "test_automation_scripts", "test_documentation_files"],
        "reuse_level": "high"
      }
    }
  },
  
  "protection_config": {
    "whitelist_protection": true,
    "staging_area_required": true,
    "incremental_testing": true,
    "rollback_capabilities": true,
    "pcpe_integration": true,
    "max_files_per_operation": 100,
    "require_confirmation_threshold": 50
  },
  
  "aggressive_patterns": [
    "rm -rf *",
    "Remove-Item * -Recurse -Force",
    "del /s /q *",
    "*.* -Recurse",
    "/* -Force",
    "cleanup_all",
    "delete_everything"
  ],
  
  "known_error_patterns": [
    {
      "pattern": "aggressive_cleanup",
      "description": "Limpeza muito agressiva causou perda de arquivos críticos",
      "prevention": "Whitelist protection + staging area required",
      "source": "self_correction_log.md"
    },
    {
      "pattern": "overly_aggressive_wildcards",
      "description": "Wildcards que removeram arquivos essenciais",
      "prevention": "Pattern validation + incremental testing",
      "source": "self_correction_log.md"
    },
    {
      "pattern": "insufficient_safeguards",
      "description": "Falta de whitelist para proteção",
      "prevention": "Mandatory whitelist validation",
      "source": "self_correction_log.md"
    },
    {
      "pattern": "no_incremental_testing",
      "description": "Operações destrutivas sem testes graduais",
      "prevention": "Incremental testing + rollback plan",
      "source": "self_correction_log.md"
    }
  ],
  
  "pcpe_integration": {
    "enabled": true,
    "script_path": "@project-core/tools/scripts/pcpe-ml-prevention-integration.js",
    "risk_thresholds": {
      "minimal": 0.1,
      "low": 0.3,
      "medium": 0.6,
      "high": 0.8,
      "critical": 0.95
    },
    "destructive_keywords": ["rm -rf", "remove-item", "del /s", "delete", "cleanup"],
    "dangerous_wildcards": ["*.*", "/*", "\\*", "all", "everything"]
  },
  
  "metrics": {
    "kpis": {
      "reuse_percentage": {
        "target": 85,
        "current": 85,
        "status": "achieved"
      },
      "performance_preservation": {
        "target": 100,
        "current": 100,
        "status": "achieved"
      },
      "error_prevention": {
        "target": 90,
        "current": 90,
        "status": "achieved"
      },
      "auto_healing_success": {
        "target": 80,
        "current": 80,
        "status": "achieved"
      },
      "ehs_check_duration": {
        "target": 5,
        "current": 1,
        "unit": "seconds",
        "status": "achieved"
      },
      "system_overhead": {
        "target": 10,
        "current": 5,
        "unit": "percentage",
        "status": "achieved"
      }
    }
  },
  
  "logging": {
    "ehs_operations_log": "@project-core/logs/ehs_operations.log",
    "ehs_protections_log": "@project-core/logs/ehs_protections.log",
    "log_level": "INFO",
    "max_log_size_mb": 10,
    "backup_count": 5
  },
  
  "commands": {
    "status": "python @project-core/automation/ehs_orchestrator.py --status",
    "health_check": "python @project-core/automation/ehs_orchestrator.py --operation=health_check --dry-run",
    "comprehensive": "python @project-core/automation/ehs_orchestrator.py --operation=comprehensive",
    "emergency_restore": "python @project-core/automation/ehs_orchestrator.py --emergency-restore",
    "test_protections": "python @project-core/automation/ehs_protections.py --test-operation=cleanup --dry-run",
    "validate_integration": "python @project-core/automation/finaltest_unified.py --mode=enhanced --verbose"
  },
  
  "environment_specific": {
    "development": {
      "dry_run_default": true,
      "verbose_logging": true,
      "staging_area_always": true
    },
    "production": {
      "dry_run_default": false,
      "verbose_logging": false,
      "staging_area_conditional": true
    }
  }
}
