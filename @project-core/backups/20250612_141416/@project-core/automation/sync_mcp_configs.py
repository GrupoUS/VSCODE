#!/usr/bin/env python3
"""
MCP CONFIGURATION SYNC MANAGER
GRUPO US VIBECODE SYSTEM V4.0

Implements automatic synchronization from mcp-master-unified.json to IDE-specific configs.
Centralizes MCP configuration management with single source of truth.

Usage:
    python sync_mcp_configs.py --sync-all          # Sync all IDE configs
    python sync_mcp_configs.py --sync-cursor       # Sync only Cursor config
    python sync_mcp_configs.py --sync-vscode       # Sync only VSCode config
    python sync_mcp_configs.py --validate          # Validate all configs
    python sync_mcp_configs.py --monitor           # Monitor for changes
"""

import argparse
import json
import logging
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import hashlib

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('@project-core/logs/mcp_sync.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MCPConfigSyncManager:
    """MCP Configuration Synchronization Manager"""
    
    def __init__(self):
        self.master_config_path = Path("@project-core/configs/mcp-master-unified.json")
        self.cursor_config_path = Path(".cursor/mcp.json")
        self.vscode_config_path = Path(".vscode/mcp.json")
        
        # Backup paths
        self.backup_dir = Path("@project-core/backups/mcp-configs")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info("MCP Configuration Sync Manager initialized")
        
    def load_master_config(self) -> Dict:
        """Load master MCP configuration"""
        if not self.master_config_path.exists():
            raise FileNotFoundError(f"Master config not found: {self.master_config_path}")
        
        with open(self.master_config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def create_backup(self, config_path: Path, description: str = ""):
        """Create backup of configuration file"""
        if not config_path.exists():
            return
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_name = f"{config_path.stem}_{timestamp}.json"
        backup_path = self.backup_dir / backup_name
        
        import shutil
        shutil.copy2(config_path, backup_path)
        logger.info(f"Backup created: {backup_path} - {description}")
    
    def generate_cursor_config(self, master_config: Dict) -> Dict:
        """Generate Cursor-specific MCP configuration"""
        cursor_config = {
            "metadata": {
                "name": "GRUPO US VIBECODE SYSTEM V4.0 - Cursor MCP Configuration (Auto-Synced)",
                "version": master_config["metadata"]["version"],
                "description": "Auto-generated from mcp-master-unified.json",
                "lastUpdated": datetime.now().isoformat(),
                "syncSource": "@project-core/configs/mcp-master-unified.json",
                "environment": "cursor-frontend-specialist",
                "autoGenerated": True
            },
            "mcpServers": {}
        }
        
        # Get Cursor-specific servers from master config
        cursor_servers = master_config["unifiedSystemConfig"]["crossEnvironmentSupport"]["cursor"]["servers"]
        
        for server_name in cursor_servers:
            if server_name in master_config["mcpServers"]:
                server_config = master_config["mcpServers"][server_name].copy()
                
                # Add Cursor-specific environment variables
                if "env" not in server_config:
                    server_config["env"] = {}
                
                server_config["env"]["CURSOR_INTEGRATION"] = "true"
                server_config["env"]["FRONTEND_FOCUS"] = "true"
                
                cursor_config["mcpServers"][server_name] = server_config
        
        # Add Cursor-specific configuration from master
        if "cursorSpecificConfig" in master_config["unifiedSystemConfig"]["crossEnvironmentSupport"]["cursor"]:
            cursor_config["cursorSpecificConfig"] = master_config["unifiedSystemConfig"]["crossEnvironmentSupport"]["cursor"]["cursorSpecificConfig"]
        
        # Add workflow integration
        if "workflowIntegration" in master_config:
            cursor_config["workflowIntegration"] = master_config["workflowIntegration"]
        
        return cursor_config
    
    def generate_vscode_config(self, master_config: Dict) -> Dict:
        """Generate VSCode-specific MCP configuration"""
        vscode_config = {
            "metadata": {
                "name": "GRUPO US VIBECODE SYSTEM V4.0 - VSCode MCP Configuration (Auto-Synced)",
                "version": master_config["metadata"]["version"],
                "description": "Auto-generated from mcp-master-unified.json",
                "lastUpdated": datetime.now().isoformat(),
                "syncSource": "@project-core/configs/mcp-master-unified.json",
                "environment": "vscode-augment",
                "autoGenerated": True
            },
            "mcpServers": {}
        }
        
        # Get VSCode-specific servers from master config
        vscode_servers = master_config["unifiedSystemConfig"]["crossEnvironmentSupport"]["vsCodeAugment"]["servers"]
        
        for server_name in vscode_servers:
            if server_name in master_config["mcpServers"]:
                server_config = master_config["mcpServers"][server_name].copy()
                
                # Add VSCode-specific environment variables
                if "env" not in server_config:
                    server_config["env"] = {}
                
                server_config["env"]["VSCODE_INTEGRATION"] = "true"
                server_config["env"]["AUGMENT_INTEGRATION"] = "true"
                
                vscode_config["mcpServers"][server_name] = server_config
        
        # Add Augment integration settings
        if "augmentIntegration" in master_config:
            vscode_config["augmentIntegration"] = master_config["augmentIntegration"]
        
        return vscode_config
    
    def sync_cursor_config(self) -> bool:
        """Sync Cursor MCP configuration"""
        try:
            logger.info("Syncing Cursor MCP configuration...")
            
            # Load master config
            master_config = self.load_master_config()
            
            # Create backup
            self.create_backup(self.cursor_config_path, "Pre-sync backup")
            
            # Generate Cursor config
            cursor_config = self.generate_cursor_config(master_config)
            
            # Ensure directory exists
            self.cursor_config_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Write config
            with open(self.cursor_config_path, 'w', encoding='utf-8') as f:
                json.dump(cursor_config, f, indent=2, ensure_ascii=False)
            
            logger.info(f"Cursor config synced successfully: {self.cursor_config_path}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to sync Cursor config: {e}")
            return False
    
    def sync_vscode_config(self) -> bool:
        """Sync VSCode MCP configuration"""
        try:
            logger.info("Syncing VSCode MCP configuration...")
            
            # Load master config
            master_config = self.load_master_config()
            
            # Create backup
            self.create_backup(self.vscode_config_path, "Pre-sync backup")
            
            # Generate VSCode config
            vscode_config = self.generate_vscode_config(master_config)
            
            # Ensure directory exists
            self.vscode_config_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Write config
            with open(self.vscode_config_path, 'w', encoding='utf-8') as f:
                json.dump(vscode_config, f, indent=2, ensure_ascii=False)
            
            logger.info(f"VSCode config synced successfully: {self.vscode_config_path}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to sync VSCode config: {e}")
            return False
    
    def sync_all_configs(self) -> bool:
        """Sync all IDE configurations"""
        logger.info("Starting full MCP configuration sync...")
        
        cursor_success = self.sync_cursor_config()
        vscode_success = self.sync_vscode_config()
        
        if cursor_success and vscode_success:
            logger.info("All MCP configurations synced successfully")
            return True
        else:
            logger.error("Some MCP configurations failed to sync")
            return False
    
    def validate_config(self, config_path: Path) -> bool:
        """Validate MCP configuration file"""
        try:
            if not config_path.exists():
                logger.error(f"Config file not found: {config_path}")
                return False
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Basic validation
            if "mcpServers" not in config:
                logger.error(f"Missing mcpServers in {config_path}")
                return False
            
            # Validate each server
            for server_name, server_config in config["mcpServers"].items():
                required_fields = ["command", "args", "enabled"]
                for field in required_fields:
                    if field not in server_config:
                        logger.error(f"Missing {field} in server {server_name} in {config_path}")
                        return False
            
            logger.info(f"Configuration valid: {config_path}")
            return True
            
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON in {config_path}: {e}")
            return False
        except Exception as e:
            logger.error(f"Validation error for {config_path}: {e}")
            return False
    
    def validate_all_configs(self) -> bool:
        """Validate all MCP configurations"""
        logger.info("Validating all MCP configurations...")
        
        master_valid = self.validate_config(self.master_config_path)
        cursor_valid = self.validate_config(self.cursor_config_path)
        vscode_valid = self.validate_config(self.vscode_config_path)
        
        if master_valid and cursor_valid and vscode_valid:
            logger.info("All MCP configurations are valid")
            return True
        else:
            logger.error("Some MCP configurations are invalid")
            return False
    
    def get_config_hash(self, config_path: Path) -> str:
        """Get hash of configuration file for change detection"""
        if not config_path.exists():
            return ""
        
        with open(config_path, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    
    def monitor_changes(self, interval: int = 30):
        """Monitor master config for changes and auto-sync"""
        logger.info(f"Starting MCP config monitoring (interval: {interval}s)")
        
        last_hash = self.get_config_hash(self.master_config_path)
        
        try:
            while True:
                time.sleep(interval)
                
                current_hash = self.get_config_hash(self.master_config_path)
                
                if current_hash != last_hash and current_hash:
                    logger.info("Master config changed, triggering sync...")
                    self.sync_all_configs()
                    last_hash = current_hash
                
        except KeyboardInterrupt:
            logger.info("Monitoring stopped by user")

def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(description="MCP Configuration Sync Manager")
    parser.add_argument("--sync-all", action="store_true", help="Sync all IDE configurations")
    parser.add_argument("--sync-cursor", action="store_true", help="Sync only Cursor configuration")
    parser.add_argument("--sync-vscode", action="store_true", help="Sync only VSCode configuration")
    parser.add_argument("--validate", action="store_true", help="Validate all configurations")
    parser.add_argument("--monitor", action="store_true", help="Monitor for changes")
    parser.add_argument("--interval", type=int, default=30, help="Monitoring interval in seconds")
    parser.add_argument("--verbose", action="store_true", help="Verbose output")
    
    args = parser.parse_args()
    
    # Set logging level
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Initialize sync manager
    sync_manager = MCPConfigSyncManager()
    
    success = True
    
    try:
        if args.sync_all:
            success = sync_manager.sync_all_configs()
        elif args.sync_cursor:
            success = sync_manager.sync_cursor_config()
        elif args.sync_vscode:
            success = sync_manager.sync_vscode_config()
        elif args.validate:
            success = sync_manager.validate_all_configs()
        elif args.monitor:
            sync_manager.monitor_changes(args.interval)
        else:
            # Default: sync all
            success = sync_manager.sync_all_configs()
        
        if success:
            print("MCP Configuration Sync - SUCCESS")
            sys.exit(0)
        else:
            print("MCP Configuration Sync - FAILED")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"Sync operation failed: {e}")
        print("MCP Configuration Sync - ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()
