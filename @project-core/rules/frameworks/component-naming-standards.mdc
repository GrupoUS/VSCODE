# Component Naming Standards - GRUPO US

## Description
Enforces consistent naming conventions for React/Next.js components following GRUPO US standards and industry best practices.

## Target Globs
- `**/*.tsx`
- `**/*.jsx` 
- `**/components/**/*`
- `**/app/**/*`
- `**/pages/**/*`

## Always Apply
true

---

## üéØ CORE PRINCIPLES

### MUST Follow These Naming Conventions

**1. Component Files**
- MUST use PascalCase for component file names
- MUST match the component name exactly
- MUST use `.tsx` extension for TypeScript components

**2. Component Names**
- MUST use PascalCase (e.g., `UserProfile`, `PaymentForm`)
- MUST be descriptive and self-explanatory
- MUST avoid abbreviations unless widely understood

**3. Directory Structure**
- MUST organize components in logical directories
- MUST use kebab-case for directory names
- MUST include index.ts files for clean imports

---

## ‚úÖ DO - Correct Examples

### File Structure
```
components/
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ button/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.test.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îî‚îÄ‚îÄ input/
‚îÇ       ‚îú‚îÄ‚îÄ Input.tsx
‚îÇ       ‚îî‚îÄ‚îÄ index.ts
‚îú‚îÄ‚îÄ forms/
‚îÇ   ‚îú‚îÄ‚îÄ user-profile/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserProfileForm.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îî‚îÄ‚îÄ payment/
‚îÇ       ‚îú‚îÄ‚îÄ PaymentForm.tsx
‚îÇ       ‚îî‚îÄ‚îÄ index.ts
‚îî‚îÄ‚îÄ layout/
    ‚îú‚îÄ‚îÄ header/
    ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx
    ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îî‚îÄ‚îÄ sidebar/
        ‚îú‚îÄ‚îÄ Sidebar.tsx
        ‚îî‚îÄ‚îÄ index.ts
```

### Component Naming
```tsx
// ‚úÖ Correct - PascalCase, descriptive
export const UserProfileForm = () => { ... }
export const PaymentMethodSelector = () => { ... }
export const DashboardMetricsCard = () => { ... }

// ‚úÖ Correct - Clear purpose and context
export const AuthenticationModal = () => { ... }
export const ProductCatalogGrid = () => { ... }
export const NotificationToast = () => { ... }
```

### Import/Export Patterns
```tsx
// ‚úÖ Correct - Clean barrel exports
// components/ui/index.ts
export { Button } from './button'
export { Input } from './input'
export { Card } from './card'

// ‚úÖ Correct - Named imports
import { Button, Input, Card } from '@/components/ui'
import { UserProfileForm } from '@/components/forms/user-profile'
```

---

## ‚ùå DON'T - Incorrect Examples

### File Structure
```
// ‚ùå Wrong - Inconsistent casing and structure
components/
‚îú‚îÄ‚îÄ userProfile.tsx          // Should be UserProfile.tsx
‚îú‚îÄ‚îÄ payment_form.jsx         // Should be PaymentForm.tsx
‚îú‚îÄ‚îÄ dashboardCard.js         // Should be DashboardCard.tsx
‚îî‚îÄ‚îÄ UI/                      // Should be ui/
    ‚îú‚îÄ‚îÄ btn.tsx             // Should be Button.tsx
    ‚îî‚îÄ‚îÄ textInput.tsx       // Should be Input.tsx or TextInput.tsx
```

### Component Naming
```tsx
// ‚ùå Wrong - camelCase instead of PascalCase
export const userProfile = () => { ... }
export const paymentForm = () => { ... }

// ‚ùå Wrong - Unclear abbreviations
export const UsrPrf = () => { ... }
export const PmtFrm = () => { ... }
export const DshBrd = () => { ... }

// ‚ùå Wrong - Generic or vague names
export const Component = () => { ... }
export const MyComponent = () => { ... }
export const Thing = () => { ... }
```

### Import/Export Anti-patterns
```tsx
// ‚ùå Wrong - Default exports for components
export default function UserProfile() { ... }

// ‚ùå Wrong - Mixed naming conventions
import userProfile from './userProfile'
import { payment_form } from './payment_form'
```

---

## üîß IMPLEMENTATION GUIDELINES

### MUST Implement These Patterns

**1. Component Declaration**
```tsx
// ‚úÖ Always use named exports with PascalCase
export const ComponentName = () => {
  return <div>Content</div>
}

// ‚úÖ For complex components with props
interface ComponentNameProps {
  title: string
  isVisible: boolean
}

export const ComponentName = ({ title, isVisible }: ComponentNameProps) => {
  return <div>{title}</div>
}
```

**2. File Organization**
```tsx
// ComponentName.tsx
import { useState } from 'react'
import { cn } from '@/lib/utils'

interface ComponentNameProps {
  // Props interface
}

export const ComponentName = (props: ComponentNameProps) => {
  // Component implementation
}
```

**3. Index File Pattern**
```tsx
// index.ts
export { ComponentName } from './ComponentName'
export type { ComponentNameProps } from './ComponentName'
```

### SHOULD Follow These Conventions

**1. Compound Components**
```tsx
// ‚úÖ Use dot notation for related components
export const Card = ({ children }: CardProps) => { ... }
export const CardHeader = ({ children }: CardHeaderProps) => { ... }
export const CardContent = ({ children }: CardContentProps) => { ... }

// Usage
<Card>
  <Card.Header>Title</Card.Header>
  <Card.Content>Content</Card.Content>
</Card>
```

**2. Higher-Order Components**
```tsx
// ‚úÖ Use 'with' prefix for HOCs
export const withAuthentication = <T,>(Component: ComponentType<T>) => { ... }
export const withLoading = <T,>(Component: ComponentType<T>) => { ... }
```

### NEVER Do These Things

**1. Generic Names**
- NEVER use names like `Component`, `Element`, `Item`
- NEVER use single letters or numbers
- NEVER use unclear abbreviations

**2. Inconsistent Casing**
- NEVER mix camelCase with PascalCase
- NEVER use snake_case for component names
- NEVER use kebab-case for component names

**3. File Naming Issues**
- NEVER use different names for file and component
- NEVER use spaces in file names
- NEVER omit file extensions

---

## üéØ GRUPO US SPECIFIC STANDARDS

### Component Categories

**1. UI Components** (`components/ui/`)
- Basic reusable components (Button, Input, Card)
- MUST follow Shadcn/ui naming conventions
- MUST be framework-agnostic

**2. Feature Components** (`components/features/`)
- Business logic components (UserDashboard, PaymentProcessor)
- MUST include feature name in component name
- MUST be organized by feature domain

**3. Layout Components** (`components/layout/`)
- Structural components (Header, Sidebar, Footer)
- MUST describe layout purpose
- MUST be responsive and accessible

**4. Form Components** (`components/forms/`)
- Form-specific components (LoginForm, RegistrationForm)
- MUST end with 'Form' suffix
- MUST integrate with React Hook Form + Zod

### Integration with GRUPO US Tech Stack

**Next.js App Router**
```tsx
// ‚úÖ Page components in app directory
// app/dashboard/page.tsx
export default function DashboardPage() { ... }

// ‚úÖ Layout components
// app/dashboard/layout.tsx
export default function DashboardLayout({ children }: LayoutProps) { ... }
```

**Supabase Integration**
```tsx
// ‚úÖ Data-fetching components
export const UserProfileData = () => { ... }
export const PaymentHistoryList = () => { ... }
```

**Tailwind CSS + Shadcn/ui**
```tsx
// ‚úÖ Styled components with proper naming
export const PrimaryButton = () => { ... }
export const DangerAlert = () => { ... }
```

---

## üîç VALIDATION CHECKLIST

Before submitting any component, verify:

- [ ] Component name is PascalCase and descriptive
- [ ] File name matches component name exactly
- [ ] Directory structure follows conventions
- [ ] Uses named exports (not default exports)
- [ ] Includes proper TypeScript interfaces
- [ ] Has corresponding index.ts file
- [ ] Follows GRUPO US tech stack patterns
- [ ] No generic or abbreviated names used
- [ ] Consistent with existing codebase naming

---

## üöÄ ENFORCEMENT

This rule is automatically enforced through:
- ESLint configuration
- Pre-commit hooks
- Code review guidelines
- Automated testing

Non-compliance will result in:
- Build warnings/errors
- Failed code reviews
- Automated refactoring suggestions

---

**GRUPO US VIBECODE SYSTEM V2.0** - Excellence Through Consistency! üöÄ
