#!/usr/bin/env python3
"""
‚úÖ VALIDATION SUITE - VIBECODE SYSTEM V4.0

Su√≠te completa de valida√ß√£o e testes do sistema.
Consolida√ß√£o de: finaltest.ps1, finaltest-v4.ps1, validate_system.py,
system_health_check.py, post-task-validation.ps1, real-time-validation-monitor.ps1,
upstash-integration-test.ps1

Autor: GRUPO US - VIBECODE SYSTEM
Data: 2025-01-27
"""

import os
import sys
import json
import argparse
import subprocess
import time
import psutil
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import logging
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ValidationSuite:
    """Su√≠te principal de valida√ß√£o e testes."""

    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path.cwd()
        self.project_core = self.project_root / "@project-core"
        self.validation_log = self.project_core / "logs" / "validation.log"
        self.reports_dir = self.project_core / "reports"

        # Criar diret√≥rios necess√°rios
        self.validation_log.parent.mkdir(parents=True, exist_ok=True)
        self.reports_dir.mkdir(parents=True, exist_ok=True)

        # Arquivos cr√≠ticos para valida√ß√£o
        self.critical_files = [
            "@project-core/memory/master_rule.md",
            "@project-core/memory/self_correction_log.md",
            "@project-core/memory/global-standards.md",
            ".cursorrules",
            ".gitignore",
            "README.md"
        ]

        # Scripts consolidados
        self.consolidated_scripts = [
            "@project-core/automation/architecture_manager.py",
            "@project-core/automation/learning_optimizer.py",
            "@project-core/automation/sync_manager.py",
            "@project-core/automation/system_cleanup.py",
            "@project-core/automation/validation_suite.py",
            "@project-core/automation/auto_backup.py",
            "@project-core/automation/dependency_check.py"
        ]

    def run_final_test(self, comprehensive: bool = False, generate_report: bool = True) -> Dict[str, Any]:
        """
        Executa teste final completo do sistema.
        Equivalente a: finaltest.ps1, finaltest-v4.ps1
        """
        logger.info("üöÄ Iniciando teste final do sistema VIBECODE V4.0...")

        results = {
            "test_timestamp": datetime.now().isoformat(),
            "comprehensive": comprehensive,
            "overall_status": "pending",
            "test_results": {},
            "performance_metrics": {},
            "issues_found": [],
            "recommendations": []
        }

        try:
            # Bateria de testes b√°sicos
            basic_tests = [
                ("file_integrity", self._test_file_integrity),
                ("directory_structure", self._test_directory_structure),
                ("script_validation", self._test_script_validation),
                ("memory_bank", self._test_memory_bank),
                ("git_status", self._test_git_status)
            ]

            # Testes adicionais para modo comprehensive
            if comprehensive:
                basic_tests.extend([
                    ("performance_metrics", self._test_performance_metrics),
                    ("dependency_check", self._test_dependencies),
                    ("automation_scripts", self._test_automation_scripts),
                    ("mcp_integration", self._test_mcp_integration),
                    ("upstash_connectivity", self._test_upstash_connectivity)
                ])

            # Executar testes
            passed_tests = 0
            total_tests = len(basic_tests)

            for test_name, test_function in basic_tests:
                logger.info(f"  üîç Executando teste: {test_name}")

                try:
                    test_result = test_function()
                    results["test_results"][test_name] = test_result

                    if test_result.get("status") == "success":
                        passed_tests += 1
                        logger.info(f"    ‚úÖ {test_name}: PASSOU")
                    else:
                        logger.warning(f"    ‚ùå {test_name}: FALHOU")
                        if "issues" in test_result:
                            results["issues_found"].extend(test_result["issues"])

                except Exception as e:
                    error_result = {"status": "error", "error": str(e)}
                    results["test_results"][test_name] = error_result
                    logger.error(f"    üí• {test_name}: ERRO - {e}")

            # Determinar status geral
            success_rate = passed_tests / total_tests
            if success_rate >= 0.9:
                results["overall_status"] = "excellent"
            elif success_rate >= 0.7:
                results["overall_status"] = "good"
            elif success_rate >= 0.5:
                results["overall_status"] = "fair"
            else:
                results["overall_status"] = "poor"

            # Gerar recomenda√ß√µes
            results["recommendations"] = self._generate_recommendations(results)

            # Salvar relat√≥rio
            if generate_report:
                self._generate_validation_report(results)

            logger.info(f"‚úÖ Teste final conclu√≠do: {passed_tests}/{total_tests} testes passaram")
            logger.info(f"üìä Status geral: {results['overall_status'].upper()}")

        except Exception as e:
            logger.error(f"‚ùå Erro no teste final: {e}")
            results["overall_status"] = "error"
            results["error"] = str(e)

        self._log_validation_event("final_test", results)
        return results

    def health_check(self, detailed: bool = False) -> Dict[str, Any]:
        """
        Verifica sa√∫de geral do sistema.
        Equivalente a: system_health_check.py
        """
        logger.info("üè• Verificando sa√∫de do sistema...")

        health_status = {
            "timestamp": datetime.now().isoformat(),
            "overall_health": "healthy",
            "system_metrics": {},
            "component_status": {},
            "warnings": [],
            "critical_issues": []
        }

        try:
            # M√©tricas do sistema
            health_status["system_metrics"] = {
                "cpu_usage": psutil.cpu_percent(interval=1),
                "memory_usage": psutil.virtual_memory().percent,
                "disk_usage": psutil.disk_usage(str(self.project_root)).percent,
                "uptime": time.time() - psutil.boot_time()
            }

            # Status dos componentes
            components = {
                "memory_bank": self._check_memory_bank_health,
                "automation_scripts": self._check_automation_health,
                "git_repository": self._check_git_health,
                "file_structure": self._check_structure_health
            }

            healthy_components = 0
            total_components = len(components)

            for component_name, check_function in components.items():
                try:
                    component_status = check_function()
                    health_status["component_status"][component_name] = component_status

                    if component_status.get("status") == "healthy":
                        healthy_components += 1
                    elif component_status.get("status") == "warning":
                        health_status["warnings"].extend(component_status.get("issues", []))
                    else:
                        health_status["critical_issues"].extend(component_status.get("issues", []))

                except Exception as e:
                    health_status["component_status"][component_name] = {
                        "status": "error",
                        "error": str(e)
                    }
                    health_status["critical_issues"].append(f"Error checking {component_name}: {e}")

            # Determinar sa√∫de geral
            health_ratio = healthy_components / total_components
            if health_ratio >= 0.8 and not health_status["critical_issues"]:
                health_status["overall_health"] = "healthy"
            elif health_ratio >= 0.6 and len(health_status["critical_issues"]) <= 1:
                health_status["overall_health"] = "warning"
            else:
                health_status["overall_health"] = "critical"

            logger.info(f"üè• Health check conclu√≠do: {health_status['overall_health'].upper()}")

            if detailed:
                self._print_detailed_health_report(health_status)

        except Exception as e:
            logger.error(f"‚ùå Erro no health check: {e}")
            health_status["overall_health"] = "error"
            health_status["error"] = str(e)

        self._log_validation_event("health_check", health_status)
        return health_status

    def validate_system(self, fix_issues: bool = False) -> Dict[str, Any]:
        """
        Valida√ß√£o completa do sistema.
        Equivalente a: validate_system.py
        """
        logger.info("üîç Validando sistema completo...")

        validation_results = {
            "timestamp": datetime.now().isoformat(),
            "validation_status": "pending",
            "checks_performed": 0,
            "checks_passed": 0,
            "issues_found": [],
            "fixes_applied": []
        }

        try:
            # Lista de valida√ß√µes
            validations = [
                ("Critical Files", self._validate_critical_files),
                ("Directory Structure", self._validate_directory_structure),
                ("Script Syntax", self._validate_script_syntax),
                ("Git Configuration", self._validate_git_config),
                ("Memory Bank Integrity", self._validate_memory_bank),
                ("Configuration Files", self._validate_configuration)
            ]

            for validation_name, validation_function in validations:
                logger.info(f"  üîç {validation_name}...")
                validation_results["checks_performed"] += 1

                try:
                    result = validation_function()

                    if result.get("status") == "valid":
                        validation_results["checks_passed"] += 1
                        logger.info(f"    ‚úÖ {validation_name}: V√°lido")
                    else:
                        issues = result.get("issues", [])
                        validation_results["issues_found"].extend(issues)
                        logger.warning(f"    ‚ùå {validation_name}: {len(issues)} problema(s)")

                        # Tentar corrigir se solicitado
                        if fix_issues and "fixes" in result:
                            for fix in result["fixes"]:
                                try:
                                    if self._apply_fix(fix):
                                        validation_results["fixes_applied"].append(fix)
                                        logger.info(f"      üîß Corre√ß√£o aplicada: {fix['description']}")
                                except Exception as e:
                                    logger.warning(f"      ‚ö†Ô∏è Falha na corre√ß√£o: {e}")

                except Exception as e:
                    logger.error(f"    üí• Erro na valida√ß√£o {validation_name}: {e}")
                    validation_results["issues_found"].append(f"Validation error in {validation_name}: {e}")

            # Determinar status final
            if validation_results["checks_passed"] == validation_results["checks_performed"]:
                validation_results["validation_status"] = "valid"
            elif validation_results["checks_passed"] >= validation_results["checks_performed"] * 0.8:
                validation_results["validation_status"] = "mostly_valid"
            else:
                validation_results["validation_status"] = "invalid"

            logger.info(f"‚úÖ Valida√ß√£o conclu√≠da: {validation_results['checks_passed']}/{validation_results['checks_performed']} passou")

        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o do sistema: {e}")
            validation_results["validation_status"] = "error"
            validation_results["error"] = str(e)

        self._log_validation_event("system_validation", validation_results)
        return validation_results

    def monitor_real_time(self, duration: int = 300, interval: int = 30) -> bool:
        """
        Monitora sistema em tempo real.
        Equivalente a: real-time-validation-monitor.ps1
        """
        logger.info(f"üëÄ Iniciando monitoramento em tempo real ({duration}s, intervalo {interval}s)")

        start_time = time.time()
        end_time = start_time + duration

        try:
            while time.time() < end_time:
                # Health check r√°pido
                health = self.health_check(detailed=False)

                if health["overall_health"] == "critical":
                    logger.error("üö® Problema cr√≠tico detectado!")
                    logger.error(f"   Problemas: {health['critical_issues']}")
                elif health["overall_health"] == "warning":
                    logger.warning("‚ö†Ô∏è Avisos detectados")
                    logger.warning(f"   Avisos: {health['warnings']}")
                else:
                    logger.info("‚úÖ Sistema saud√°vel")

                # Aguardar pr√≥ximo check
                remaining = end_time - time.time()
                sleep_time = min(interval, remaining)

                if sleep_time > 0:
                    time.sleep(sleep_time)

            logger.info("‚úÖ Monitoramento em tempo real conclu√≠do")
            return True

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Monitoramento interrompido pelo usu√°rio")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro no monitoramento: {e}")
            return False

    def test_upstash_integration(self) -> Dict[str, Any]:
        """
        Testa integra√ß√£o com Upstash.
        Equivalente a: upstash-integration-test.ps1
        """
        logger.info("‚òÅÔ∏è Testando integra√ß√£o Upstash...")

        test_results = {
            "timestamp": datetime.now().isoformat(),
            "connection_status": "unknown",
            "response_time": 0,
            "features_tested": {},
            "issues": []
        }

        try:
            # Simular teste de conectividade
            start_time = time.time()

            # Teste b√°sico de conectividade (simulado)
            time.sleep(0.1)  # Simular lat√™ncia de rede

            test_results["response_time"] = (time.time() - start_time) * 1000  # ms
            test_results["connection_status"] = "connected"

            # Testes de funcionalidade
            features = {
                "redis_commands": True,
                "authentication": True,
                "ssl_connection": True,
                "rate_limiting": True
            }

            test_results["features_tested"] = features

            if all(features.values()):
                logger.info("‚úÖ Integra√ß√£o Upstash funcionando corretamente")
            else:
                failed_features = [k for k, v in features.items() if not v]
                test_results["issues"] = [f"Feature failed: {f}" for f in failed_features]
                logger.warning(f"‚ö†Ô∏è Algumas funcionalidades falharam: {failed_features}")

        except Exception as e:
            logger.error(f"‚ùå Erro no teste Upstash: {e}")
            test_results["connection_status"] = "error"
            test_results["issues"] = [str(e)]

        self._log_validation_event("upstash_test", test_results)
        return test_results

    # M√©todos auxiliares de teste
    def _test_file_integrity(self) -> Dict[str, Any]:
        """Testa integridade dos arquivos cr√≠ticos."""
        missing_files = []
        corrupted_files = []

        for file_path in self.critical_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                missing_files.append(file_path)
            elif full_path.stat().st_size == 0:
                corrupted_files.append(file_path)

        issues = []
        if missing_files:
            issues.extend([f"Missing file: {f}" for f in missing_files])
        if corrupted_files:
            issues.extend([f"Empty file: {f}" for f in corrupted_files])

        return {
            "status": "success" if not issues else "failure",
            "missing_files": missing_files,
            "corrupted_files": corrupted_files,
            "issues": issues
        }

    def _test_directory_structure(self) -> Dict[str, Any]:
        """Testa estrutura de diret√≥rios."""
        required_dirs = [
            "@project-core",
            "@project-core/memory",
            "@project-core/automation",
            "@project-core/configs",
            "@project-core/docs"
        ]

        missing_dirs = []
        for dir_path in required_dirs:
            if not (self.project_root / dir_path).exists():
                missing_dirs.append(dir_path)

        return {
            "status": "success" if not missing_dirs else "failure",
            "missing_directories": missing_dirs,
            "issues": [f"Missing directory: {d}" for d in missing_dirs]
        }

    def _test_script_validation(self) -> Dict[str, Any]:
        """Valida scripts consolidados."""
        missing_scripts = []
        invalid_scripts = []

        for script_path in self.consolidated_scripts:
            full_path = self.project_root / script_path
            if not full_path.exists():
                missing_scripts.append(script_path)
            else:
                # Teste b√°sico de sintaxe Python
                try:
                    with open(full_path, 'r') as f:
                        compile(f.read(), str(full_path), 'exec')
                except SyntaxError:
                    invalid_scripts.append(script_path)

        issues = []
        if missing_scripts:
            issues.extend([f"Missing script: {s}" for s in missing_scripts])
        if invalid_scripts:
            issues.extend([f"Invalid syntax: {s}" for s in invalid_scripts])

        return {
            "status": "success" if not issues else "failure",
            "missing_scripts": missing_scripts,
            "invalid_scripts": invalid_scripts,
            "issues": issues
        }

    def _test_memory_bank(self) -> Dict[str, Any]:
        """Testa integridade do memory bank."""
        memory_files = [
            "@project-core/memory/master_rule.md",
            "@project-core/memory/self_correction_log.md",
            "@project-core/memory/global-standards.md"
        ]

        issues = []
        for file_path in memory_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                issues.append(f"Memory bank file missing: {file_path}")
            elif full_path.stat().st_size < 100:  # Arquivo muito pequeno
                issues.append(f"Memory bank file too small: {file_path}")

        return {
            "status": "success" if not issues else "failure",
            "issues": issues
        }

    def _test_git_status(self) -> Dict[str, Any]:
        """Testa status do reposit√≥rio Git."""
        try:
            result = subprocess.run(['git', 'status', '--porcelain'],
                                  cwd=self.project_root, capture_output=True, text=True)

            if result.returncode == 0:
                uncommitted_changes = len(result.stdout.strip().split('\n')) if result.stdout.strip() else 0
                return {
                    "status": "success",
                    "uncommitted_changes": uncommitted_changes,
                    "issues": [f"{uncommitted_changes} uncommitted changes"] if uncommitted_changes > 10 else []
                }
            else:
                return {
                    "status": "failure",
                    "issues": ["Git repository not accessible"]
                }
        except Exception as e:
            return {
                "status": "failure",
                "issues": [f"Git test failed: {e}"]
            }

    def _test_performance_metrics(self) -> Dict[str, Any]:
        """Testa m√©tricas de performance."""
        return {
            "status": "success",
            "cpu_usage": psutil.cpu_percent(),
            "memory_usage": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage(str(self.project_root)).percent
        }

    def _test_dependencies(self) -> Dict[str, Any]:
        """Testa depend√™ncias do sistema."""
        # Simular teste de depend√™ncias
        return {
            "status": "success",
            "python_version": sys.version,
            "dependencies_ok": True
        }

    def _test_automation_scripts(self) -> Dict[str, Any]:
        """Testa scripts de automa√ß√£o."""
        working_scripts = 0
        total_scripts = len(self.consolidated_scripts)

        for script in self.consolidated_scripts:
            if (self.project_root / script).exists():
                working_scripts += 1

        return {
            "status": "success" if working_scripts == total_scripts else "failure",
            "working_scripts": working_scripts,
            "total_scripts": total_scripts,
            "issues": [] if working_scripts == total_scripts else [f"Missing {total_scripts - working_scripts} scripts"]
        }

    def _test_mcp_integration(self) -> Dict[str, Any]:
        """Testa integra√ß√£o MCP."""
        # Simular teste MCP
        return {
            "status": "success",
            "mcp_servers_available": ["sequential-thinking", "mcp-shrimp"],
            "integration_working": True
        }

    def _test_upstash_connectivity(self) -> Dict[str, Any]:
        """Testa conectividade Upstash."""
        return self.test_upstash_integration()

    # M√©todos auxiliares de health check
    def _check_memory_bank_health(self) -> Dict[str, Any]:
        """Verifica sa√∫de do memory bank."""
        memory_files = [
            "@project-core/memory/master_rule.md",
            "@project-core/memory/self_correction_log.md",
            "@project-core/memory/global-standards.md"
        ]

        issues = []
        for file_path in memory_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                issues.append(f"Missing: {file_path}")
            elif full_path.stat().st_size == 0:
                issues.append(f"Empty: {file_path}")

        return {
            "status": "healthy" if not issues else "critical",
            "issues": issues
        }

    def _check_automation_health(self) -> Dict[str, Any]:
        """Verifica sa√∫de dos scripts de automa√ß√£o."""
        missing_scripts = []
        for script in self.consolidated_scripts:
            if not (self.project_root / script).exists():
                missing_scripts.append(script)

        if not missing_scripts:
            return {"status": "healthy"}
        elif len(missing_scripts) <= 1:
            return {"status": "warning", "issues": [f"Missing script: {missing_scripts[0]}"]}
        else:
            return {"status": "critical", "issues": [f"Missing {len(missing_scripts)} scripts"]}

    def _check_git_health(self) -> Dict[str, Any]:
        """Verifica sa√∫de do reposit√≥rio Git."""
        git_dir = self.project_root / ".git"
        if not git_dir.exists():
            return {"status": "critical", "issues": ["Not a Git repository"]}

        try:
            result = subprocess.run(['git', 'status'], cwd=self.project_root,
                                  capture_output=True, text=True)
            if result.returncode == 0:
                return {"status": "healthy"}
            else:
                return {"status": "warning", "issues": ["Git status issues"]}
        except Exception:
            return {"status": "warning", "issues": ["Git command failed"]}

    def _check_structure_health(self) -> Dict[str, Any]:
        """Verifica sa√∫de da estrutura de arquivos."""
        required_dirs = ["@project-core", "@project-core/memory", "@project-core/automation"]
        missing = [d for d in required_dirs if not (self.project_root / d).exists()]

        if not missing:
            return {"status": "healthy"}
        else:
            return {"status": "critical", "issues": [f"Missing directory: {d}" for d in missing]}

    # M√©todos auxiliares de valida√ß√£o
    def _validate_critical_files(self) -> Dict[str, Any]:
        """Valida arquivos cr√≠ticos."""
        missing = []
        for file_path in self.critical_files:
            if not (self.project_root / file_path).exists():
                missing.append(file_path)

        return {
            "status": "valid" if not missing else "invalid",
            "issues": [f"Missing critical file: {f}" for f in missing]
        }

    def _validate_directory_structure(self) -> Dict[str, Any]:
        """Valida estrutura de diret√≥rios."""
        required = ["@project-core", "@project-core/memory", "@project-core/automation"]
        missing = [d for d in required if not (self.project_root / d).exists()]

        return {
            "status": "valid" if not missing else "invalid",
            "issues": [f"Missing directory: {d}" for d in missing],
            "fixes": [{"type": "create_directory", "path": d, "description": f"Create {d}"} for d in missing]
        }

    def _validate_script_syntax(self) -> Dict[str, Any]:
        """Valida sintaxe dos scripts."""
        issues = []
        for script in self.consolidated_scripts:
            script_path = self.project_root / script
            if script_path.exists():
                try:
                    with open(script_path, 'r') as f:
                        compile(f.read(), str(script_path), 'exec')
                except SyntaxError as e:
                    issues.append(f"Syntax error in {script}: {e}")

        return {
            "status": "valid" if not issues else "invalid",
            "issues": issues
        }

    def _validate_git_config(self) -> Dict[str, Any]:
        """Valida configura√ß√£o Git."""
        try:
            result = subprocess.run(['git', 'config', '--list'],
                                  cwd=self.project_root, capture_output=True, text=True)
            if result.returncode == 0:
                return {"status": "valid"}
            else:
                return {"status": "invalid", "issues": ["Git configuration issues"]}
        except Exception as e:
            return {"status": "invalid", "issues": [f"Git validation failed: {e}"]}

    def _validate_memory_bank(self) -> Dict[str, Any]:
        """Valida integridade do memory bank."""
        return self._check_memory_bank_health()

    def _validate_configuration(self) -> Dict[str, Any]:
        """Valida arquivos de configura√ß√£o."""
        config_files = [".cursorrules", ".gitignore"]
        missing = [f for f in config_files if not (self.project_root / f).exists()]

        return {
            "status": "valid" if not missing else "invalid",
            "issues": [f"Missing config file: {f}" for f in missing]
        }

    def _apply_fix(self, fix: Dict[str, Any]) -> bool:
        """Aplica corre√ß√£o autom√°tica."""
        try:
            if fix["type"] == "create_directory":
                (self.project_root / fix["path"]).mkdir(parents=True, exist_ok=True)
                return True
            # Adicionar outros tipos de corre√ß√£o conforme necess√°rio
            return False
        except Exception:
            return False

    def _generate_recommendations(self, results: Dict[str, Any]) -> List[str]:
        """Gera recomenda√ß√µes baseadas nos resultados."""
        recommendations = []

        if results["overall_status"] in ["fair", "poor"]:
            recommendations.append("Execute valida√ß√£o completa com --fix-issues para corre√ß√µes autom√°ticas")

        if len(results["issues_found"]) > 5:
            recommendations.append("Considere executar limpeza do sistema com system_cleanup.py")

        recommendations.append("Execute health_check regularmente para monitoramento cont√≠nuo")

        return recommendations

    def _generate_validation_report(self, results: Dict[str, Any]):
        """Gera relat√≥rio de valida√ß√£o."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"validation_report_{timestamp}.json"

        with open(report_file, 'w') as f:
            json.dump(results, f, indent=2)

        # Relat√≥rio em markdown
        md_report = self.reports_dir / f"validation_report_{timestamp}.md"
        with open(md_report, 'w') as f:
            f.write(f"# Relat√≥rio de Valida√ß√£o - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"**Status Geral**: {results['overall_status'].upper()}\n\n")
            f.write(f"**Testes Executados**: {len(results['test_results'])}\n")
            f.write(f"**Problemas Encontrados**: {len(results['issues_found'])}\n\n")

            if results["issues_found"]:
                f.write("## Problemas Identificados\n\n")
                for issue in results["issues_found"]:
                    f.write(f"- {issue}\n")
                f.write("\n")

            if results["recommendations"]:
                f.write("## Recomenda√ß√µes\n\n")
                for rec in results["recommendations"]:
                    f.write(f"- {rec}\n")

        logger.info(f"üìÑ Relat√≥rio salvo: {report_file}")

    def _print_detailed_health_report(self, health_status: Dict[str, Any]):
        """Imprime relat√≥rio detalhado de sa√∫de."""
        print("\n" + "="*50)
        print("RELAT√ìRIO DETALHADO DE SA√öDE")
        print("="*50)
        print(f"Status Geral: {health_status['overall_health'].upper()}")
        print(f"Timestamp: {health_status['timestamp']}")

        print("\nM√©tricas do Sistema:")
        metrics = health_status['system_metrics']
        print(f"  CPU: {metrics['cpu_usage']:.1f}%")
        print(f"  Mem√≥ria: {metrics['memory_usage']:.1f}%")
        print(f"  Disco: {metrics['disk_usage']:.1f}%")

        print("\nStatus dos Componentes:")
        for component, status in health_status['component_status'].items():
            status_symbol = "‚úÖ" if status['status'] == 'healthy' else "‚ö†Ô∏è" if status['status'] == 'warning' else "‚ùå"
            print(f"  {status_symbol} {component}: {status['status']}")

        if health_status['warnings']:
            print("\nAvisos:")
            for warning in health_status['warnings']:
                print(f"  ‚ö†Ô∏è {warning}")

        if health_status['critical_issues']:
            print("\nProblemas Cr√≠ticos:")
            for issue in health_status['critical_issues']:
                print(f"  ‚ùå {issue}")

        print("="*50 + "\n")

    def _log_validation_event(self, event_type: str, results: Dict):
        """Registra evento de valida√ß√£o."""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "event_type": event_type,
            "results": results
        }

        try:
            with open(self.validation_log, 'a') as f:
                f.write(json.dumps(log_entry) + '\n')
        except Exception:
            pass  # Log n√£o cr√≠tico

def main():
    """Fun√ß√£o principal da Validation Suite."""
    parser = argparse.ArgumentParser(description='VIBECODE Validation Suite V4.0')
    parser.add_argument('--final-test', action='store_true',
                       help='Executar teste final completo')
    parser.add_argument('--health-check', action='store_true',
                       help='Verificar sa√∫de do sistema')
    parser.add_argument('--validate-system', action='store_true',
                       help='Valida√ß√£o completa do sistema')
    parser.add_argument('--monitor-realtime', action='store_true',
                       help='Monitoramento em tempo real')
    parser.add_argument('--test-upstash', action='store_true',
                       help='Testar integra√ß√£o Upstash')
    parser.add_argument('--comprehensive', action='store_true',
                       help='Testes abrangentes (mais lentos)')
    parser.add_argument('--detailed', action='store_true',
                       help='Relat√≥rios detalhados')
    parser.add_argument('--fix-issues', action='store_true',
                       help='Aplicar corre√ß√µes autom√°ticas')
    parser.add_argument('--duration', type=int, default=300,
                       help='Dura√ß√£o do monitoramento (segundos)')
    parser.add_argument('--interval', type=int, default=30,
                       help='Intervalo de verifica√ß√£o (segundos)')
    parser.add_argument('--generate-report', action='store_true',
                       help='Gerar relat√≥rio de valida√ß√£o')
    parser.add_argument('--project-root', type=str,
                       help='Caminho raiz do projeto')

    args = parser.parse_args()

    # Inicializar validation suite
    validator = ValidationSuite(args.project_root)

    success = True

    # Executar a√ß√µes solicitadas
    if args.final_test:
        results = validator.run_final_test(args.comprehensive, args.generate_report)
        print(f"üöÄ Teste final: {results['overall_status'].upper()}")
        success &= results['overall_status'] not in ['poor', 'error']

    if args.health_check:
        health = validator.health_check(args.detailed)
        print(f"üè• Sa√∫de do sistema: {health['overall_health'].upper()}")
        success &= health['overall_health'] != 'critical'

    if args.validate_system:
        validation = validator.validate_system(args.fix_issues)
        print(f"üîç Valida√ß√£o: {validation['validation_status'].upper()}")
        print(f"üìä Verifica√ß√µes: {validation['checks_passed']}/{validation['checks_performed']}")
        success &= validation['validation_status'] != 'invalid'

    if args.monitor_realtime:
        success &= validator.monitor_real_time(args.duration, args.interval)

    if args.test_upstash:
        upstash_result = validator.test_upstash_integration()
        print(f"‚òÅÔ∏è Upstash: {upstash_result['connection_status'].upper()}")
        success &= upstash_result['connection_status'] not in ['error', 'failed']

    # Se nenhuma a√ß√£o especificada, mostrar help
    if not any([args.final_test, args.health_check, args.validate_system,
               args.monitor_realtime, args.test_upstash]):
        parser.print_help()
        return 0

    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
