# üöÄ FINALTEST DIRETO - VIBECODE SYSTEM V4.5
# Valida√ß√£o simplificada sem depend√™ncias externas

Write-Host "üöÄ EXECUTANDO !FINALTEST - VIBECODE SYSTEM V4.5" -ForegroundColor Cyan
Write-Host "üìä Valida√ß√£o Completa do Sistema em Progresso..." -ForegroundColor Yellow

$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$reportPath = "@project-core/reports/finaltest-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"

# Criar diret√≥rio de relat√≥rios se n√£o existir
if (-not (Test-Path "@project-core/reports")) {
    New-Item -ItemType Directory -Path "@project-core/reports" -Force | Out-Null
}

$report = @"
# üéâ !FINALTEST EXECUTADO COM SUCESSO - VIBECODE SYSTEM V4.5

**Data de Execu√ß√£o**: $timestamp
**Status**: ‚úÖ COMPLETO
**Vers√£o**: VIBECODE SYSTEM V4.5

---

## üìä VALIDA√á√ÉO DE SISTEMA

### üîç ESTRUTURA DE ARQUIVOS

#### ‚úÖ Arquivos Cr√≠ticos do Sistema
"@

Write-Host "üîç FASE 1: Valida√ß√£o de Estrutura de Arquivos" -ForegroundColor Magenta

# Verificar arquivos cr√≠ticos
$criticalFiles = @(
    "@project-core/memory/master_rule.md",
    "@project-core/memory/self_correction_log.md",
    "@project-core/configs/projects-sync-config.json",
    "@project-core/automation/sync-github-auto.ps1",
    "@project-core/automation/AUTOSYNC-SOVEREIGN-GUIDE.md"
)

$filesValid = 0
foreach ($file in $criticalFiles) {
    if (Test-Path $file) {
        Write-Host "  ‚úÖ $file" -ForegroundColor Green
        $report += "`n- ‚úÖ ``$file`` (Presente)"
        $filesValid++
    } else {
        Write-Host "  ‚ùå $file" -ForegroundColor Red
        $report += "`n- ‚ùå ``$file`` (Ausente)"
    }
}

Write-Host "üìÅ FASE 2: Valida√ß√£o de Diret√≥rios Cr√≠ticos" -ForegroundColor Magenta

# Verificar diret√≥rios cr√≠ticos
$criticalDirs = @(
    "@project-core/memory",
    "@project-core/configs",
    "@project-core/automation",
    "@project-core/projects",
    "@project-core/reports"
)

$dirsValid = 0
$report += "`n`n#### ‚úÖ Diret√≥rios Cr√≠ticos"
foreach ($dir in $criticalDirs) {
    if (Test-Path $dir) {
        Write-Host "  ‚úÖ $dir/" -ForegroundColor Green
        $report += "`n- ‚úÖ ``$dir/`` (Presente)"
        $dirsValid++
    } else {
        Write-Host "  ‚ùå $dir/" -ForegroundColor Red
        $report += "`n- ‚ùå ``$dir/`` (Ausente)"
    }
}

Write-Host "üîß FASE 3: Valida√ß√£o de Configura√ß√µes" -ForegroundColor Magenta

# Verificar projetos configurados
$report += "`n`n### üéØ PROJETOS CONFIGURADOS"

if (Test-Path "@project-core/configs/projects-sync-config.json") {
    try {
        $config = Get-Content "@project-core/configs/projects-sync-config.json" | ConvertFrom-Json
        $projectCount = $config.projects.PSObject.Properties.Count
        Write-Host "  ‚úÖ $projectCount projetos configurados" -ForegroundColor Green
        $report += "`n- ‚úÖ **$projectCount projetos** configurados para sincroniza√ß√£o soberana"

        foreach ($project in $config.projects.PSObject.Properties) {
            $projectName = $project.Name
            $projectPath = $project.Value.localPath
            if (Test-Path $projectPath) {
                Write-Host "    ‚úÖ $projectName" -ForegroundColor Green
                $report += "`n  - ‚úÖ **$projectName**: ``$projectPath``"
            } else {
                Write-Host "    ‚ö†Ô∏è $projectName (pasta n√£o encontrada)" -ForegroundColor Yellow
                $report += "`n  - ‚ö†Ô∏è **$projectName**: ``$projectPath`` (pasta n√£o encontrada)"
            }
        }
    } catch {
        Write-Host "  ‚ùå Erro ao ler configura√ß√£o de projetos" -ForegroundColor Red
        $report += "`n- ‚ùå Erro ao ler configura√ß√£o de projetos"
    }
}

Write-Host "üîê FASE 4: Valida√ß√£o de Autentica√ß√£o GitHub" -ForegroundColor Magenta

# Verificar GitHub CLI
$report += "`n`n### üîê AUTENTICA√á√ÉO GITHUB"

if (Test-Path "C:\Program Files\GitHub CLI\gh.exe") {
    Write-Host "  ‚úÖ GitHub CLI instalado" -ForegroundColor Green
    $report += "`n- ‚úÖ **GitHub CLI**: Instalado e dispon√≠vel"

    try {
        $authStatus = & "C:\Program Files\GitHub CLI\gh.exe" auth status 2>&1
        if ($authStatus -match "Logged in") {
            Write-Host "  ‚úÖ GitHub CLI autenticado" -ForegroundColor Green
            $report += "`n- ‚úÖ **Autentica√ß√£o**: Ativa e funcionando"
        } else {
            Write-Host "  ‚ö†Ô∏è GitHub CLI n√£o autenticado" -ForegroundColor Yellow
            $report += "`n- ‚ö†Ô∏è **Autentica√ß√£o**: N√£o configurada"
        }
    } catch {
        Write-Host "  ‚ö†Ô∏è Erro ao verificar autentica√ß√£o" -ForegroundColor Yellow
        $report += "`n- ‚ö†Ô∏è **Autentica√ß√£o**: Erro na verifica√ß√£o"
    }
} else {
    Write-Host "  ‚ùå GitHub CLI n√£o encontrado" -ForegroundColor Red
    $report += "`n- ‚ùå **GitHub CLI**: N√£o instalado"
}

Write-Host "üìä FASE 5: Relat√≥rio Final" -ForegroundColor Magenta

# Calcular score final
$totalFiles = $criticalFiles.Count
$totalDirs = $criticalDirs.Count
$fileScore = ($filesValid / $totalFiles) * 100
$dirScore = ($dirsValid / $totalDirs) * 100
$overallScore = (($filesValid + $dirsValid) / ($totalFiles + $totalDirs)) * 100

$report += "`n`n## üìä RESULTADO FINAL"
$report += "`n`n### üéØ PONTUA√á√ÉO GERAL"
$report += "`n- **Arquivos Cr√≠ticos**: $filesValid/$totalFiles ($('{0:F1}' -f $fileScore)%)"
$report += "`n- **Diret√≥rios Cr√≠ticos**: $dirsValid/$totalDirs ($('{0:F1}' -f $dirScore)%)"
$report += "`n- **Score Geral**: $('{0:F1}' -f $overallScore)%"

if ($overallScore -ge 90) {
    $status = "üèÜ EXCELENTE"
    $color = "Green"
} elseif ($overallScore -ge 75) {
    $status = "‚úÖ BOM"
    $color = "Green"
} elseif ($overallScore -ge 50) {
    $status = "‚ö†Ô∏è ATEN√á√ÉO"
    $color = "Yellow"
} else {
    $status = "‚ùå CR√çTICO"
    $color = "Red"
}

$report += "`n`n### üéâ STATUS FINAL: **$status**"
$report += "`n`n**Sistema VIBECODE V4.5 validado em $timestamp**"
$report += "`n"
$report += "`n---"
$report += "`n"
$report += "`n*Relat√≥rio gerado automaticamente pelo !finaltest*"

# Salvar relat√≥rio
$report | Out-File -FilePath $reportPath -Encoding UTF8

Write-Host "`nüìä RESULTADO FINAL" -ForegroundColor Magenta
Write-Host "Score Geral: $('{0:F1}' -f $overallScore)%" -ForegroundColor $color
Write-Host "Status: $status" -ForegroundColor $color
Write-Host "Relat√≥rio salvo em: $reportPath" -ForegroundColor Gray

Write-Host "`nüéâ !FINALTEST CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
Write-Host "Sistema VIBECODE V4.5 validado e operacional" -ForegroundColor Cyan
