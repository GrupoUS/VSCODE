# üöÄ VIBECODE SYSTEM V4.0 - Sincroniza√ß√£o SOBERANA de Projetos GitHub
# Script para sincroniza√ß√£o onde pastas locais s√£o SEMPRE dominantes
# For√ßa push, remove arquivos remotos n√£o existentes localmente
# Configura√ß√£o: @project-core/configs/projects-sync-config.json

param(
    [string]$ProjectName = "",
    [switch]$All,
    [switch]$DryRun,
    [string]$Message = "",
    [switch]$Verbose
)

# Configura√ß√µes base
$ScriptVersion = "4.0.0-SOVEREIGN"
$ScriptName = "Sincroniza√ß√£o Soberana Multi-Projetos"
$SystemRootPath = "C:\Users\Admin\OneDrive\GRUPOUS\VSCODE"
$ConfigPath = "@project-core\configs\projects-sync-config.json"

Write-Host "üöÄ $ScriptName v$ScriptVersion" -ForegroundColor Cyan
Write-Host "üëë MODO SOBERANO: Pastas locais SEMPRE dominantes" -ForegroundColor Yellow
Write-Host "=" * 80 -ForegroundColor Cyan

# Fun√ß√£o para carregar configura√ß√£o
function Load-ProjectsConfig {
    param([string]$ConfigPath)

    $fullConfigPath = Join-Path $SystemRootPath $ConfigPath

    if (-not (Test-Path $fullConfigPath)) {
        Write-Error "‚ùå Arquivo de configura√ß√£o n√£o encontrado: $fullConfigPath"
        exit 1
    }

    try {
        $config = Get-Content $fullConfigPath -Raw | ConvertFrom-Json
        Write-Host "‚úÖ Configura√ß√£o carregada: $($config.projects.PSObject.Properties.Count) projetos encontrados" -ForegroundColor Green
        return $config
    }
    catch {
        Write-Error "‚ùå Erro ao carregar configura√ß√£o: $($_.Exception.Message)"
        exit 1
    }
}

# Fun√ß√£o para sincroniza√ß√£o soberana de um projeto
function Sync-SovereignProject {
    param(
        [PSCustomObject]$ProjectConfig,
        [string]$ProjectKey,
        [string]$CustomMessage = "",
        [switch]$DryRun
    )

    Write-Host "`nüëë SINCRONIZA√á√ÉO SOBERANA: $($ProjectConfig.name)" -ForegroundColor Magenta
    Write-Host "=" * 60 -ForegroundColor Gray

    $projectPath = Join-Path $SystemRootPath $ProjectConfig.localPath
    $originalLocation = Get-Location

    try {
        # Verificar se o projeto existe
        if (-not (Test-Path $projectPath)) {
            Write-Host "‚ùå Projeto n√£o encontrado: $projectPath" -ForegroundColor Red
            return @{ Success = $false; Error = "Projeto n√£o encontrado" }
        }

        # Navegar para a pasta do projeto
        Set-Location $projectPath
        Write-Host "üìÅ Pasta do projeto: $projectPath" -ForegroundColor Green
        Write-Host "üåê Reposit√≥rio: $($ProjectConfig.repositoryUrl)" -ForegroundColor Green
        Write-Host "üåø Branch: $($ProjectConfig.branch)" -ForegroundColor Green

        # Verificar se √© um reposit√≥rio git
        $isGitRepo = Test-Path ".git"

        if (-not $isGitRepo) {
            Write-Host "üîß Inicializando reposit√≥rio Git..." -ForegroundColor Yellow
            if (-not $DryRun) {
                git init
                git remote add origin $ProjectConfig.repositoryUrl
                git config user.email "admin@grupous.com"
                git config user.name "GrupoUS"
            }
        } else {
            # Verificar e corrigir remote
            $currentRemote = git remote get-url origin 2>$null
            if ($currentRemote -ne $ProjectConfig.repositoryUrl) {
                Write-Host "üîß Atualizando remote URL..." -ForegroundColor Yellow
                if (-not $DryRun) {
                    git remote set-url origin $ProjectConfig.repositoryUrl
                }
            }
        }

        # SINCRONIZA√á√ÉO SOBERANA - PARTE 1: BACKUP
        if ($ProjectConfig.syncSettings.createBackup -and -not $DryRun) {
            Write-Host "`nüì¶ Criando backup antes da sincroniza√ß√£o soberana..." -ForegroundColor Yellow
            $backupName = "$($ProjectKey)_sovereign_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
            # Criar backup ser√° implementado depois se necess√°rio
        }

        # SINCRONIZA√á√ÉO SOBERANA - PARTE 2: PREPARAR COMMIT LOCAL
        Write-Host "`nüìä Verificando mudan√ßas locais..." -ForegroundColor Yellow
        $gitStatus = git status --porcelain

        # Preparar mensagem de commit
        $commitMessage = if ($CustomMessage) {
            $CustomMessage
        } else {
            "üëë [$ProjectKey] Sincroniza√ß√£o SOBERANA - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        }

        # Adicionar todos os arquivos (incluindo novos e modificados)
        Write-Host "`n‚ûï Adicionando TODOS os arquivos locais..." -ForegroundColor Yellow
        if ($DryRun) {
            Write-Host "üîç DRY RUN - Comandos que seriam executados:" -ForegroundColor Magenta
            Write-Host "   git add -A" -ForegroundColor Gray
            Write-Host "   git commit -m '$commitMessage'" -ForegroundColor Gray
            Write-Host "   git push origin $($ProjectConfig.branch) --force" -ForegroundColor Gray
            return @{ Success = $true; DryRun = $true }
        }

        git add -A  # -A inclui arquivos novos, modificados E remove arquivos deletados

        if ($LASTEXITCODE -ne 0) {
            throw "Erro ao adicionar arquivos"
        }

        # Verificar se h√° mudan√ßas para commit
        $hasChanges = git diff --cached --quiet; $LASTEXITCODE -ne 0

        if ($hasChanges) {
            # Fazer commit
            Write-Host "üíæ Fazendo commit..." -ForegroundColor Yellow
            git commit -m $commitMessage

            if ($LASTEXITCODE -ne 0) {
                throw "Erro ao fazer commit"
            }
        } else {
            Write-Host "‚ÑπÔ∏è Nenhuma mudan√ßa para commit" -ForegroundColor Gray
        }

        # SINCRONIZA√á√ÉO SOBERANA - PARTE 3: FORCE PUSH
        Write-Host "`nüëë EXECUTANDO PUSH SOBERANO (FOR√áA TOTAL)..." -ForegroundColor Red
        Write-Host "‚ö†Ô∏è ATEN√á√ÉO: Reposit√≥rio remoto ser√° SOBRESCRITO completamente" -ForegroundColor Yellow

        # Buscar informa√ß√µes remotas primeiro
        Write-Host "üì• Buscando informa√ß√µes remotas..." -ForegroundColor Yellow
        git fetch origin 2>$null

        # Push for√ßado - SOBERANIA TOTAL
        Write-Host "üöÄ Executando push for√ßado..." -ForegroundColor Red
        git push origin $ProjectConfig.branch --force

        if ($LASTEXITCODE -ne 0) {
            # Se falhar, tentar criar a branch remota
            Write-Host "‚ö†Ô∏è Branch remota pode n√£o existir, criando..." -ForegroundColor Yellow
            git push -u origin $ProjectConfig.branch --force

            if ($LASTEXITCODE -ne 0) {
                throw "Erro ao fazer push for√ßado"
            }
        }

        Write-Host "`n‚úÖ SINCRONIZA√á√ÉO SOBERANA CONCLU√çDA!" -ForegroundColor Green
        Write-Host "üëë Reposit√≥rio remoto agora √© ID√äNTICO ao local" -ForegroundColor Green
        Write-Host "üóëÔ∏è Arquivos remotos n√£o existentes localmente foram REMOVIDOS" -ForegroundColor Green

        return @{
            Success = $true;
            Changes = if ($gitStatus) { $gitStatus.Count } else { 0 }
            Mode = "SOVEREIGN"
            CommitMessage = $commitMessage
        }

    }
    catch {
        Write-Host "‚ùå Erro na sincroniza√ß√£o soberana: $($_.Exception.Message)" -ForegroundColor Red
        return @{ Success = $false; Error = $_.Exception.Message }
    }
    finally {
        Set-Location $originalLocation
    }
}

# Fun√ß√£o principal
function Main {
    # Carregar configura√ß√£o
    $config = Load-ProjectsConfig -ConfigPath $ConfigPath

    # Verificar se est√° no modo soberano
    if (-not $config.globalSettings.sovereignMode) {
        Write-Warning "‚ö†Ô∏è Modo soberano n√£o est√° habilitado na configura√ß√£o"
        Write-Host "üí° Para habilitar, defina 'sovereignMode': true em globalSettings" -ForegroundColor Yellow
    }

    # Determinar quais projetos sincronizar
    $projectsToSync = @()

    if ($ProjectName) {
        # Sincronizar projeto espec√≠fico
        if ($config.projects.PSObject.Properties.Name -contains $ProjectName) {
            $projectsToSync += @{ Key = $ProjectName; Config = $config.projects.$ProjectName }
            Write-Host "üéØ Modo Projeto Espec√≠fico: $ProjectName" -ForegroundColor Magenta
        } else {
            Write-Error "‚ùå Projeto '$ProjectName' n√£o encontrado na configura√ß√£o"
            Write-Host "üí° Projetos dispon√≠veis:" -ForegroundColor Yellow
            $config.projects.PSObject.Properties.Name | ForEach-Object {
                Write-Host "   - $_" -ForegroundColor White
            }
            exit 1
        }
    } elseif ($All) {
        # Sincronizar todos os projetos
        Write-Host "üåê Modo TODOS os Projetos - SINCRONIZA√á√ÉO SOBERANA TOTAL" -ForegroundColor Magenta
        $config.projects.PSObject.Properties | ForEach-Object {
            if ($_.Value.enabled) {
                $projectsToSync += @{ Key = $_.Name; Config = $_.Value }
            }
        }
    } else {
        Write-Host "‚ö†Ô∏è Especifique um projeto (-ProjectName) ou use -All para todos os projetos" -ForegroundColor Yellow
        Write-Host "üí° Projetos dispon√≠veis:" -ForegroundColor Yellow
        $config.projects.PSObject.Properties.Name | ForEach-Object {
            Write-Host "   - $_" -ForegroundColor White
        }
        exit 1
    }

    # Executar sincroniza√ß√£o soberana
    $results = @()
    $totalProjects = $projectsToSync.Count
    $currentProject = 0

    foreach ($project in $projectsToSync) {
        $currentProject++
        Write-Host "`n" + ("=" * 80) -ForegroundColor Cyan
        Write-Host "üìä PROJETO $currentProject de $totalProjects" -ForegroundColor Cyan

        $result = Sync-SovereignProject -ProjectConfig $project.Config -ProjectKey $project.Key -CustomMessage $Message -DryRun:$DryRun
        $result.ProjectKey = $project.Key
        $result.ProjectName = $project.Config.name
        $results += $result

        if ($result.Success) {
            Write-Host "‚úÖ $($project.Config.name): SINCRONIZA√á√ÉO SOBERANA BEM-SUCEDIDA" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $($project.Config.name): FALHOU - $($result.Error)" -ForegroundColor Red
        }
    }

    # Relat√≥rio final
    Write-Host "`n" + ("=" * 80) -ForegroundColor Cyan
    Write-Host "üìã RELAT√ìRIO FINAL DE SINCRONIZA√á√ÉO SOBERANA" -ForegroundColor Cyan
    Write-Host "=" * 80 -ForegroundColor Cyan

    $successful = ($results | Where-Object { $_.Success }).Count
    $failed = ($results | Where-Object { -not $_.Success }).Count

    Write-Host "‚úÖ Projetos sincronizados com sucesso: $successful" -ForegroundColor Green
    Write-Host "‚ùå Projetos com falha: $failed" -ForegroundColor Red
    Write-Host "üìä Total de projetos processados: $totalProjects" -ForegroundColor White

    if ($failed -gt 0) {
        Write-Host "`n‚ùå PROJETOS COM FALHA:" -ForegroundColor Red
        $results | Where-Object { -not $_.Success } | ForEach-Object {
            Write-Host "   - $($_.ProjectName): $($_.Error)" -ForegroundColor Red
        }
    }

    Write-Host "`nüéâ SINCRONIZA√á√ÉO SOBERANA FINALIZADA!" -ForegroundColor Cyan
    Write-Host "üëë Reposit√≥rios remotos agora s√£o ID√äNTICOS √†s pastas locais" -ForegroundColor Yellow
    Write-Host "=" * 80 -ForegroundColor Cyan

    return $results
}

# Executar fun√ß√£o principal
Main
