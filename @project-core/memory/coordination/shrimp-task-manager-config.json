{
  "mcpServers": {
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"]
    },
    "mcp-sequentialthinking-tools": {
      "command": "npx",
      "args": ["-y", "mcp-sequentialthinking-tools"]
    },
    "mcp-shrimp-task-manager": {
      "command": "npx",
      "args": ["-y", "mcp-shrimp-task-manager"],
      "env": {
        "DATA_DIR": "@project-core/memory/coordination",
        "ENABLE_THOUGHT_CHAIN": "true",
        "TEMPLATES_USE": "en",
        "ENABLE_GUI": "false",
        
        "MCP_PROMPT_PLAN_TASK": "## GRUPO US Sequential Thinking Enhanced Task Planning\n\n**MANDATORY SEQUENTIAL THINKING INTEGRATION**\n\nFor complex tasks (complexity >= 7), you MUST:\n1. Use @modelcontextprotocol/server-sequential-thinking for core reasoning\n2. Apply mcp-sequentialthinking-tools for intelligent tool recommendations\n3. Consult @project-core/memory/core/ for existing patterns and decisions\n4. Generate comprehensive analysis with confidence scoring\n\n**Sequential Thinking Framework:**\n\n### Task Analysis with Sequential Thinking\n- **Initial Thought**: {description}\n- **Requirements**: {requirements}\n- **Complexity Assessment**: Analyze technical complexity (1-10 scale)\n- **Sequential Reasoning**: Break down into logical thinking steps\n- **Tool Recommendations**: Apply confidence-scored tool suggestions\n\n### Enhanced Integration Checklist\n- [ ] Sequential thinking analysis completed\n- [ ] Tool recommendations with confidence scores applied\n- [ ] Memory bank consultation performed (product-context.md, active-context.md, decision-log.md, system-patterns.md)\n- [ ] Pattern matching analysis conducted\n- [ ] Risk assessment with mitigation strategies\n\n### Sequential Thinking Decomposition Strategy\n1. **Thought Process**: Use sequential thinking to break down complex problems\n2. **Tool Selection**: Apply confidence-scored tool recommendations\n3. **Pattern Application**: Apply learned patterns from memory bank\n4. **Risk Assessment**: Identify potential issues using sequential analysis\n5. **Resource Optimization**: Leverage tool recommendations and cached solutions\n\n### Quality Assurance with Sequential Thinking\n- **Reasoning Consistency**: Ensure logical flow in sequential thinking\n- **Tool Confidence**: Prioritize high-confidence tool recommendations\n- **Decision Alignment**: Verify consistency with previous architectural decisions\n- **Performance Impact**: Consider impact based on sequential analysis\n- **Learning Opportunity**: Identify patterns for future sequential thinking\n\n**Output Requirements:**\n- Sequential thinking breakdown with logical progression\n- Tool recommendations with confidence scores and rationale\n- Risk assessment with mitigation strategies\n- Performance optimization recommendations\n- Learning extraction plan for post-execution",
        
        "MCP_PROMPT_PLAN_TASK_APPEND": "\n\n## GRUPO US Memory Integration Guidelines\n\n**Critical Requirements:**\n1. **Memory Consultation**: Every task MUST reference memory bank consultation\n2. **Pattern Application**: Apply relevant patterns from system-patterns.md\n3. **Decision Consistency**: Align with decisions in decision-log.md\n4. **Cache Utilization**: Check for cached solutions before planning new implementation\n5. **Learning Integration**: Plan for pattern extraction and memory updates\n\n**Task Complexity Thresholds:**\n- **Simple (1-3)**: Direct implementation with pattern application\n- **Medium (4-6)**: Requires memory consultation and pattern analysis\n- **Complex (7-10)**: Mandatory Sequential Thinking integration and comprehensive memory analysis\n\n**Performance Optimization:**\n- Prioritize cached solutions to reduce API requests\n- Apply learned patterns to accelerate development\n- Reference previous decisions to avoid redundant analysis\n- Plan for automatic memory updates post-execution",
        
        "MCP_PROMPT_EXECUTE_TASK": "## GRUPO US Memory-Guided Task Execution\n\n**MANDATORY PRE-EXECUTION PROTOCOL**\n\nBefore executing any task, you MUST:\n1. **Load Memory Consultation Report**: Review the consultation report from planning phase\n2. **Apply Recommended Patterns**: Use patterns identified in memory consultation\n3. **Check Cached Solutions**: Prioritize cached solutions over new implementation\n4. **Verify Decision Alignment**: Ensure execution aligns with previous decisions\n\n**Execution Framework:**\n\n### Memory-Guided Implementation\n- **Pattern Application**: Apply specific patterns from system-patterns.md\n- **Cached Solution Integration**: Adapt cached solutions when available\n- **Decision Consistency**: Follow architectural decisions from decision-log.md\n- **Context Awareness**: Maintain awareness of current project state from active-context.md\n\n### Quality Standards\n- **Code Consistency**: Follow patterns established in memory bank\n- **Performance Optimization**: Implement with performance metrics in mind\n- **Documentation**: Document new patterns for future memory bank updates\n- **Testing Strategy**: Include testing approach aligned with system standards\n\n### Execution Monitoring\n- **Progress Tracking**: Update active-context.md with execution progress\n- **Pattern Recognition**: Identify new patterns during implementation\n- **Performance Metrics**: Track execution time and resource usage\n- **Learning Extraction**: Note learnings for post-execution memory updates\n\n**Status Transparency:**\nEvery response must begin with appropriate status prefix:\n- `[MEMORY BANK: ACTIVE]` - Memory bank consulted and applied\n- `[MEMORY BANK: UPDATING]` - Memory bank being updated during execution\n- `[MEMORY BANK: INACTIVE]` - Memory bank not available (error condition)\n\n**Output Requirements:**\n- Implementation following memory bank patterns\n- Documentation of new patterns discovered\n- Performance metrics and optimization notes\n- Preparation for automatic memory bank updates",
        
        "MCP_PROMPT_EXECUTE_TASK_APPEND": "\n\n## GRUPO US Execution Standards\n\n**Memory Integration Requirements:**\n1. **Consultation Compliance**: Verify memory consultation was completed\n2. **Pattern Adherence**: Follow patterns from memory bank strictly\n3. **Cache Utilization**: Use cached solutions when available (20-30% API reduction target)\n4. **Performance Monitoring**: Track and report execution metrics\n5. **Learning Documentation**: Document new patterns and optimizations\n\n**Quality Assurance:**\n- All code must follow established patterns from system-patterns.md\n- New features must have corresponding tests aligned with testing patterns\n- Documentation must follow templates from memory bank\n- UI elements must comply with design patterns when applicable\n\n**Post-Execution Protocol:**\n- Update active-context.md with completion status\n- Extract and document new patterns for memory bank\n- Cache successful solutions for future use\n- Update performance metrics and optimization data\n- Trigger self-improvement analysis if applicable\n\n**Error Handling:**\n- Reference previous error patterns from memory bank\n- Apply proven error resolution strategies\n- Document new error patterns for future reference\n- Update self-correction protocols as needed",
        
        "MCP_PROMPT_ANALYZE_TASK": "## GRUPO US Memory-Enhanced Task Analysis\n\n**COMPREHENSIVE ANALYSIS FRAMEWORK**\n\n### Memory Bank Integration\n**Task Summary:** {summary}\n**Initial Concept:** {initialConcept}\n**Previous Analysis:** {previousAnalysis}\n\n### Memory Consultation Requirements\n1. **Pattern Analysis**: Search system-patterns.md for applicable patterns\n2. **Decision Review**: Check decision-log.md for relevant architectural decisions\n3. **Cache Analysis**: Examine cached solutions for similar tasks\n4. **Context Integration**: Consider current state from active-context.md\n\n### Technical Analysis\n- **Complexity Assessment**: Evaluate technical complexity (1-10 scale)\n- **Dependency Mapping**: Identify task dependencies and prerequisites\n- **Resource Requirements**: Estimate time, API calls, and computational resources\n- **Risk Assessment**: Identify potential issues based on memory bank history\n\n### Pattern Recognition\n- **Similar Tasks**: Identify similar tasks from memory bank history\n- **Applicable Patterns**: List relevant patterns from system-patterns.md\n- **Optimization Opportunities**: Identify chances to reuse cached solutions\n- **Learning Potential**: Assess potential for new pattern discovery\n\n### Performance Optimization\n- **API Efficiency**: Plan to minimize API requests through caching\n- **Pattern Reuse**: Maximize reuse of established patterns\n- **Cache Utilization**: Prioritize cached solutions over new implementation\n- **Resource Optimization**: Optimize for memory and computational efficiency\n\n### Quality Assurance\n- **Consistency Check**: Ensure alignment with existing system architecture\n- **Decision Alignment**: Verify consistency with previous decisions\n- **Standard Compliance**: Check compliance with coding and design standards\n- **Testing Strategy**: Plan comprehensive testing approach\n\n**Analysis Output Requirements:**\n- Detailed technical analysis with complexity scoring\n- Memory bank pattern recommendations\n- Risk assessment with mitigation strategies\n- Performance optimization plan\n- Quality assurance checklist",
        
        "MCP_PROMPT_VERIFY_TASK": "## GRUPO US Memory-Integrated Task Verification\n\n**COMPREHENSIVE VERIFICATION PROTOCOL**\n\n### Memory Bank Compliance Verification\n1. **Pattern Adherence**: Verify implementation follows patterns from system-patterns.md\n2. **Decision Consistency**: Confirm alignment with decisions from decision-log.md\n3. **Quality Standards**: Check compliance with established quality standards\n4. **Performance Metrics**: Validate performance against established benchmarks\n\n### Implementation Verification\n- **Functionality**: Verify all requirements are implemented correctly\n- **Code Quality**: Check code follows established patterns and standards\n- **Documentation**: Ensure proper documentation following memory bank templates\n- **Testing**: Verify comprehensive testing coverage\n\n### Memory Bank Integration Check\n- **Pattern Application**: Confirm correct application of memory bank patterns\n- **Cache Utilization**: Verify efficient use of cached solutions\n- **Performance Optimization**: Check achievement of performance targets\n- **Learning Extraction**: Verify new patterns are documented for memory bank\n\n### Quality Assurance Verification\n- **Consistency**: Verify consistency with existing system architecture\n- **Standards Compliance**: Check compliance with coding and design standards\n- **Error Handling**: Verify proper error handling following established patterns\n- **Security**: Check security compliance following security patterns\n\n### Performance Verification\n- **API Efficiency**: Verify API request optimization (target: 20-30% reduction)\n- **Response Time**: Check response times meet performance standards\n- **Resource Usage**: Verify efficient resource utilization\n- **Cache Hit Rate**: Validate cache utilization effectiveness\n\n### Memory Bank Update Preparation\n- **New Patterns**: Identify new patterns discovered during implementation\n- **Optimization Insights**: Document performance optimizations for future use\n- **Decision Updates**: Note any decisions that should be added to decision log\n- **Learning Documentation**: Prepare learning updates for memory bank\n\n**Verification Output Requirements:**\n- Comprehensive verification report with pass/fail status\n- Pattern compliance assessment\n- Performance metrics validation\n- Memory bank update recommendations\n- Quality assurance confirmation",
        
        "MCP_PROMPT_LIST_TASKS": "# GRUPO US Memory-Enhanced Task Overview\n\n## Memory Bank Status\n**Status**: [MEMORY BANK: ACTIVE]\n**Last Consultation**: {timestamp}\n**Cache Hit Rate**: {cacheHitRate}%\n**Pattern Library**: {patternCount} patterns available\n\n## Task Status Summary\n\n### 🔄 In-Progress Tasks\n{tasks.in_progress}\n\n**Memory Integration Notes:**\n- All in-progress tasks have completed mandatory memory consultation\n- Applicable patterns from memory bank are being applied\n- Performance monitoring is active for optimization tracking\n\n### ⏳ Pending Tasks\n{tasks.pending}\n\n**Pre-Execution Requirements:**\n- Memory consultation required before execution\n- Pattern analysis needed for optimization\n- Cache check required for similar solutions\n- Dependency verification against memory bank\n\n### ✅ Completed Tasks\n{tasks.completed}\n\n**Memory Bank Contributions:**\n- New patterns extracted and added to memory bank\n- Performance metrics updated for optimization\n- Successful solutions cached for future use\n- Decision log updated with architectural decisions\n\n## Memory Bank Insights\n\n### Pattern Utilization\n- **Most Used Patterns**: {topPatterns}\n- **Cache Efficiency**: {cacheEfficiency}%\n- **API Optimization**: {apiOptimization}% reduction achieved\n- **Learning Rate**: {learningRate} new patterns per week\n\n### Performance Metrics\n- **Average Task Completion**: {avgCompletionTime}\n- **Memory Consultation Time**: {consultationTime}ms average\n- **Cache Response Time**: {cacheResponseTime}ms average\n- **Pattern Application Success**: {patternSuccessRate}%\n\n### Recommendations\n- **High Priority**: Tasks with available cached solutions\n- **Medium Priority**: Tasks with applicable memory bank patterns\n- **Low Priority**: Tasks requiring new pattern development\n- **Optimization Opportunities**: Tasks with high API usage potential\n\n**Next Actions:**\n1. Execute high-priority tasks with cached solutions first\n2. Apply memory bank patterns to medium-priority tasks\n3. Plan comprehensive analysis for complex tasks\n4. Update memory bank with new learnings from completed tasks"
      }
    }
  },
  
  "coordinationConfig": {
    "memoryIntegration": {
      "mandatoryConsultation": true,
      "cacheUtilization": true,
      "patternApplication": true,
      "performanceMonitoring": true
    },
    
    "taskManagement": {
      "dependencyTracking": true,
      "progressMonitoring": true,
      "automaticSummarization": true,
      "contextPreservation": true
    },
    
    "qualityAssurance": {
      "patternCompliance": true,
      "decisionConsistency": true,
      "performanceValidation": true,
      "learningExtraction": true
    }
  },
  
  "performanceTargets": {
    "apiRequestReduction": "20-30%",
    "cacheHitRate": ">70%",
    "consultationCompliance": "100%",
    "patternApplicationRate": ">85%"
  }
}
