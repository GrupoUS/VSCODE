# üöÄ VIBECODE SYSTEM V4.0 - Sincroniza√ß√£o Autom√°tica GitHub
# Script para sincroniza√ß√£o autom√°tica entre pasta local e reposit√≥rio GitHub

param(
    [switch]$Force,
    [switch]$DryRun,
    [string]$Message = "üîÑ Sincroniza√ß√£o autom√°tica - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
)

# Configura√ß√µes
$LocalPath = "C:\Users\Admin\OneDrive\GRUPOUS\VSCODE"
$RemoteRepo = "https://github.com/GrupoUS/VSCODE.git"
$Branch = "clean-final"

Write-Host "üöÄ VIBECODE SYSTEM V4.0 - Sincroniza√ß√£o Autom√°tica" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Verificar se estamos na pasta correta
if (-not (Test-Path $LocalPath)) {
    Write-Error "‚ùå Pasta local n√£o encontrada: $LocalPath"
    exit 1
}

Set-Location $LocalPath

# Verificar se √© um reposit√≥rio git
if (-not (Test-Path ".git")) {
    Write-Error "‚ùå N√£o √© um reposit√≥rio git v√°lido"
    exit 1
}

Write-Host "üìÅ Pasta local: $LocalPath" -ForegroundColor Green
Write-Host "üåê Reposit√≥rio remoto: $RemoteRepo" -ForegroundColor Green
Write-Host "üåø Branch: $Branch" -ForegroundColor Green

# Verificar status do git
Write-Host "`nüìä Verificando status..." -ForegroundColor Yellow
$gitStatus = git status --porcelain

if ($gitStatus) {
    Write-Host "üìù Mudan√ßas detectadas:" -ForegroundColor Yellow
    $gitStatus | ForEach-Object { Write-Host "   $_" -ForegroundColor White }

    if ($DryRun) {
        Write-Host "`nüîç DRY RUN - N√£o executando mudan√ßas" -ForegroundColor Magenta
        Write-Host "Comandos que seriam executados:" -ForegroundColor Magenta
        Write-Host "   git add ." -ForegroundColor Gray
        Write-Host "   git commit -m '$Message'" -ForegroundColor Gray
        Write-Host "   git push origin $Branch" -ForegroundColor Gray
        exit 0
    }

    # Adicionar arquivos
    Write-Host "`n‚ûï Adicionando arquivos..." -ForegroundColor Yellow
    git add .

    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erro ao adicionar arquivos"
        exit 1
    }

    # Fazer commit
    Write-Host "üíæ Fazendo commit..." -ForegroundColor Yellow
    git commit -m $Message

    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erro ao fazer commit"
        exit 1
    }

    # Fazer push
    Write-Host "üöÄ Fazendo push para GitHub..." -ForegroundColor Yellow
    if ($Force) {
        git push origin $Branch --force-with-lease
    } else {
        git push origin $Branch
    }

    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Erro ao fazer push"
        exit 1
    }

    Write-Host "`n‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
    Write-Host "üåê Arquivos enviados para: $RemoteRepo" -ForegroundColor Green

} else {
    Write-Host "`n‚úÖ Nenhuma mudan√ßa detectada - reposit√≥rio j√° sincronizado" -ForegroundColor Green
}

# Verificar se h√° atualiza√ß√µes remotas
Write-Host "`nüîÑ Verificando atualiza√ß√µes remotas..." -ForegroundColor Yellow
git fetch origin

$localCommit = git rev-parse HEAD
$remoteCommit = git rev-parse "origin/$Branch"

if ($localCommit -ne $remoteCommit) {
    Write-Host "üì• Atualiza√ß√µes remotas detectadas" -ForegroundColor Yellow

    if ($DryRun) {
        Write-Host "üîç DRY RUN - Comando que seria executado:" -ForegroundColor Magenta
        Write-Host "   git pull origin $Branch" -ForegroundColor Gray
    } else {
        Write-Host "üì• Fazendo pull das atualiza√ß√µes..." -ForegroundColor Yellow
        git pull origin $Branch

        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Atualiza√ß√µes baixadas com sucesso!" -ForegroundColor Green
        } else {
            Write-Warning "‚ö†Ô∏è Conflitos detectados - resolu√ß√£o manual necess√°ria"
        }
    }
} else {
    Write-Host "‚úÖ Reposit√≥rio local est√° atualizado" -ForegroundColor Green
}

Write-Host "`nüéâ Sincroniza√ß√£o autom√°tica finalizada!" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Fun√ß√£o para verificar se um comando existe
function Test-CommandExists {
    param ($command)
    $oldPreference = $ErrorActionPreference
    $ErrorActionPreference = 'stop'
    try { if (Get-Command $command) { return $true } }
    catch { return $false }
    finally { $ErrorActionPreference = $oldPreference }
}

# Fun√ß√£o para executar valida√ß√£o de seguran√ßa
function Test-SecurityValidation {
    Write-Host "üîí Executando valida√ß√£o de seguran√ßa..." -ForegroundColor Cyan

    # Verificar se git-secrets est√° instalado
    if (-not (Test-CommandExists git-secrets)) {
        Write-Host "‚ö†Ô∏è  git-secrets n√£o encontrado. Executando setup..." -ForegroundColor Yellow
        python setup_git_secrets.py
    }

    # Executar verifica√ß√£o de secrets
    $secretsCheck = git secrets --scan
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Secrets encontrados no c√≥digo. Commit bloqueado." -ForegroundColor Red
        return $false
    }

    # Verificar arquivos .env
    $envFiles = git ls-files | Select-String -Pattern '\.env$' | Where-Object { $_ -notmatch '.env.example' }
    if ($envFiles) {
        Write-Host "‚ùå Arquivos .env encontrados no reposit√≥rio:" -ForegroundColor Red
        $envFiles | ForEach-Object { Write-Host "  - $_" }
        return $false
    }

    Write-Host "‚úÖ Valida√ß√£o de seguran√ßa conclu√≠da com sucesso!" -ForegroundColor Green
    return $true
}

# Fun√ß√£o principal de sincroniza√ß√£o
function Start-GitSync {
    Write-Host "üöÄ Iniciando sincroniza√ß√£o com GitHub..." -ForegroundColor Green

    # Verificar mudan√ßas
    $changes = git status --porcelain
    if ($changes) {
        Write-Host "üìù Mudan√ßas detectadas:" -ForegroundColor Yellow
        $changes | ForEach-Object { Write-Host "  $_" }

        # Executar valida√ß√£o de seguran√ßa
        if (-not (Test-SecurityValidation)) {
            Write-Host "‚ùå Sincroniza√ß√£o cancelada devido a problemas de seguran√ßa." -ForegroundColor Red
            return
        }

        # Adicionar e commitar mudan√ßas
        git add .
        $commitMessage = "üîÑ Sync autom√°tico: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        git commit -m $commitMessage

        # Push para o GitHub
        git push origin main
        Write-Host "‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ú® Nenhuma mudan√ßa detectada." -ForegroundColor Cyan
    }
}

# Executar sincroniza√ß√£o
Start-GitSync
